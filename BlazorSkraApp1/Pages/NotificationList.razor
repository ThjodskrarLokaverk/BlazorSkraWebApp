@page "/NotificationList/{id}"
@using BlazorSkraApp1.Data
@using BlazorSkraApp1.Services
@inject ICategoriesAssignmentsService service
@inject IFormsInfoService formservice
@inject IJSRuntime jsRuntime
@inject ICategoriesService service1

@if (categoriesAssignmentsList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <h2>@category.CategoryName</h2>
        <table class="table table-hover table-striped">
            <thead class="thead-dark">
                <tr>
                    <th>Nafn tilkynningar</th>
                    <th>Stofnandi</th>
                    <th style="width: 1%">Stofndags</th>
                    <AuthorizeView Roles="Admin"> <th style="width: 5%"></th> </AuthorizeView>
                </tr>
            </thead>
            <tbody>
                @foreach (var categoryAssignment in categoriesAssignmentsList)
                {
                    <tr>
                        <td onclick="location.href='/Notification/@categoryAssignment.FormsInfo.FormId'"> @categoryAssignment.FormsInfo.FormName</td>
                        <AuthorizeView Roles="Admin">
                            <td>
                                <button class="btn btn-link edit-icon" @onclick="(() => ShowEditPopup(categoryAssignment))" data-toggle="modal" data-target="#confirmDeleteModal" value="Delete">
                                    <i class="fas fa-pen" title="Modifier"></i>
                                </button>
                            </td>
                        </AuthorizeView>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <AuthorizeView Roles="Admin">   
        <div class="container" style="width:100%">
                <button type="button" class="btn btn-outline-success btn-block" @onclick="ShowCategoryPopup">Bæta við tilkynningu</button>
        </div>
    </AuthorizeView>
    

    @if (showPopup)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Bæta við nýrri tilkynningu</h4>
                        <button type="button" class="close" @onclick="Cancel">
                            <span aria-hidden="true">x</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@forminfo" OnValidSubmit="@AddForm">
                            <div class="form-group">
                                <label for="FormName">Nafn tilkynningar</label>
                                <input type="hidden" @bind-value="@forminfo.FormName" />
                                <InputText id="name" class="form-control" @bind-Value="@forminfo.FormName" />
                                <ValidationMessage For="@(() => forminfo.FormName)" />
                            </div>
                            <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Cancel">Hætta við </button>
                            <button type="submit" class="btn btn-primary">Bæta við</button>

                            <DataAnnotationsValidator />
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }
    @if (showEdit)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Uppfæra / Eyða</h5>
                        <button type="button" class="close" data-dismiss="modal" @onclick="Cancel">&times; </button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@categoryAssignment" OnValidSubmit="@UpdateFormName">
                            <div class="form-group">
                                <label for="FormName">Nafn tilkynningar</label>
                                <input type="hidden" @bind-value="@categoryAssignment.FormsInfo.FormName" />
                                <InputText id="name" class="form-control" @bind-Value="@categoryAssignment.FormsInfo.FormName" />
                            </div>
                        </EditForm>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="Cancel" data-dismiss="modal">Hætta við</button>
                        <button type="button" class="btn btn-primary" @onclick="(() => UpdateFormName())">Uppfæra</button>
                        <button type="button" class="btn btn-danger" @onclick="(() => showDeletePopup(categoryAssignment))">Eyða</button>
                    </div>
                </div>
            </div>
        </div>
    }
    @if (showDelete)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title"> Staðfesting</h5>
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>Ertu viss um að þú viljir eyða tilkynningunni @categoryAssignment.FormsInfo.FormName ? </p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="Cancel" data-dismiss="modal">Hætta við</button>
                        <button type="button" class="btn btn-danger" @onclick="(() => Delete(categoryAssignment))">Eyða</button>
                    </div>
                </div>
            </div>
        </div>
    }

}
@code{

    [Parameter]
    public string id { get; set; }

    int categoryId;
    bool showPopup = false;
    bool showDelete = false;
    bool showEdit = false;
    Categories category = new Categories();

    List<CategoriesAssignments> categoriesAssignmentsList;

    FormsInfo forminfo = new FormsInfo();
    CategoriesAssignments categoryAssignment = new CategoriesAssignments();

    protected override async Task OnInitializedAsync()
    {
        categoryId = Int16.Parse(id);
        categoriesAssignmentsList = await service.Get(categoryId);
        category = await service1.Get(categoryId);
    }
    void ShowEditPopup(CategoriesAssignments pickedCategoryAssignment)
    {
        categoryAssignment = pickedCategoryAssignment;
        showEdit = true;
    }
    void showDeletePopup(CategoriesAssignments categoryassignments)
    {
        categoryAssignment = categoryassignments;
        showDelete = true;
    }
    void ShowCategoryPopup()
    {
        showPopup = true;
    }

    void Cancel()
    {
        showPopup = false;
        showDelete = false;
        showEdit = false;
    }

    protected async void AddForm()
    {
        showPopup = false;

        FormsInfo test = new FormsInfo();
        test = await formservice.Add(forminfo);

        System.Console.WriteLine(forminfo.FormId);

        var category = new CategoriesAssignments();
        category.FormId = forminfo.FormId;
        category.CategoryId = categoryId;

        await service.Add(category);

        forminfo = new FormsInfo();

        DataChanged();

    }

    protected async void Delete(CategoriesAssignments category)
    {
        showDelete = false;

        await service.Delete(category);

        await formservice.Delete(category.FormId);

        showEdit = false;

        DataChanged();
    }

    protected async void UpdateFormName()
    {
        await formservice.Update(categoryAssignment.FormId);
        showEdit = false;
        DataChanged();
    }

    private async void DataChanged()
    {
        categoriesAssignmentsList = await service.Get(categoryId);
        StateHasChanged();
    }
}