@page "/NotificationList/{id}"
@using BlazorSkraApp1.Data
@using BlazorSkraApp1.Services
@inject ICategoriesAssignmentsService service
@inject IFormsInfoService formservice
@inject IJSRuntime jsRuntime
@inject ICategoriesService service1

@if (categoriesAssignmentsList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <h2>@category.CategoryName</h2>
        <table class="table table-hover table-striped">
            <thead class="thead-dark">
                <tr>
                    <th>Nafn tilkynningar</th>
                    <AuthorizeView Roles="Admin">
                        <th>Stofnandi</th>
                        <th style="width: 1%">Stofndags</th>

                         <th style="width: 5%"></th>
                         <th style="width: 5%"></th>
                    </AuthorizeView>
                </tr>
            </thead>
            <tbody>
                @foreach (var categoryAssignment in categoriesAssignmentsList)
                {
                    <tr>
                        <td onclick="location.href='/Notification/@categoryAssignment.FormsInfo.FormId'"> @categoryAssignment.FormsInfo.FormName</td>
                        <AuthorizeView Roles="Admin">
                            <td>x</td>
                            <td>y</td>
                            <td>
                                <button class="btn btn-link btn-xs table-icon" data-toggle="modal">
                                    <a id="a-tag" href="EditNotification/@categoryAssignment.FormsInfo.FormId">
                                        <i class="fas fa-pen" title="Modifier"></i>
                                    </a>
                                </button>
                            </td>
                            <td>
                                <button class="btn btn-link btn-xs table-icon" @onclick="(() => ShowDeletePopup(categoryAssignment))" data-toggle="modal" data-target="#confirmDeleteModal" value="Delete">
                                    <i class="fas fa-trash" title="Modifier"></i>
                                </button>
                            </td>
                        </AuthorizeView>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <AuthorizeView Roles="Admin">
        <div class="container">
            <span id="plus-icon" class="oi oi-plus"></span>
            <a id="add-question-link" href="/CreateNotification">Bæta við tilkynningu</a>
        </div>
    </AuthorizeView>

    @if (showDelete)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Eyða</h5>
                        <button type="button" class="close" data-dismiss="modal" @onclick="Cancel">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>Ertu viss um að þú viljir eyða tilkynningunni @categoryAssignment.FormsInfo.FormName?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" @onclick="(() => Delete(categoryAssignment))">Eyða</button>
                        <button type="button" class="btn cancel-btn" @onclick="Cancel" data-dismiss="modal">Hætta við</button>
                    </div>
                </div>
            </div>
        </div>
    }
}
@code{

    [Parameter]
    public string id { get; set; }
    private int categoryId;
    private bool showDelete = false;
    Categories category = new Categories();

    List<CategoriesAssignments> categoriesAssignmentsList;

    CategoriesAssignments categoryAssignment = new CategoriesAssignments();

    protected override async Task OnInitializedAsync()
    {
        categoryId = Int16.Parse(id);
        categoriesAssignmentsList = await service.Get(categoryId);
        category = await service1.Get(categoryId);
    }
    private void ShowDeletePopup(CategoriesAssignments categoryassignments)
    {
        categoryAssignment = categoryassignments;
        showDelete = true;
    }

    private void Cancel()
    {
        showDelete = false;
    }

    protected async void Delete(CategoriesAssignments category)
    {
        showDelete = false;

        await service.Delete(category);

        await formservice.Delete(category.FormId);

        DataChanged();
    }

    private async void DataChanged()
    {
        categoriesAssignmentsList = await service.Get(categoryId);
        StateHasChanged();
    }
}