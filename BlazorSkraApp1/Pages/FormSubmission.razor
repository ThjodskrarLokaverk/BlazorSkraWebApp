@page "/eydublad/{id}"
@using BlazorSkraApp1.Data
@using BlazorSkraApp1.Services
@using BlazorSkraApp1.Models.InputModels
@using BlazorSkraApp1.Models.ViewModels
@using System
@using BlazorSkraApp1.Components
@using Microsoft.AspNetCore.Identity;
@inject NavigationManager NavigationManager
@inject IQuestionsFormAssignmentService questionservice
@inject IOptionsQuestionAssignmnentsService optionservice
@inject IOptionsService oservice
@inject ISubmissionsInfoService subinfoservice
@inject ISubmissionsService subservice
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime jsRuntime
@inject IMailService mailservice
@inject IAdminService adminService
@inject IFormsInfoService formsInfoService
@inject IFormsService formsService
<!-- *** A form created by an admin for users to fill out and submit *** -->

@if (editContext == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Augnablik...</span>
        </div>
    </div>
}
else if (!formFound)
{
    <h5 style="text-align:center">Eyðublað fannst ekki. Þú verður aftur á forsíðu innan skamms</h5>
    <meta http-equiv="refresh" content="3; url = /" />
    <img src="Images/meditation-bw.png" class="meditation-img" alt="Empty state">
}
else if (confirmation)
{
    <br>
    <h2 style="text-align:center">Innsendingu hefur verið komið til skila</h2>
    <h5 style="text-align:center">Þú verður aftur á forsíðu innan skamms</h5>
    <meta http-equiv="refresh" content="3; url = /" />
}
else
{
    <div class="container sub-container">
        <EditForm EditContext="editContext" OnSubmit="@SubmitForm">
            <ObjectGraphDataAnnotationsValidator />
            <h3 class="form-list-heading" style="color:black"> @form.FormName</h3>
            @foreach (var question in form.Questions)
            {
                <div class="container">
                    <div class="card">
                        <div class="card-body form-check">
                            <h5 class="question-title">@(question.QuestionOrderNum+1). @question.QuestionName</h5>
                            @if (@question.QuestionTypeId == 4)
                            {
                                @foreach (var option in question.Options)
                                {
                                    <label>
                                        <InputRadioComponent SelectedValue="@option.OptionName"
                                            @bind-Value="@submissionInput.Radio[question.QuestionTypeOrderNum].Value" />
                                        @option.OptionName
                                    </label><br>
                                }
                                <ValidationMessage For="@(() => submissionInput.Radio[question.QuestionTypeOrderNum].Value)" />
                            }
                            else if (@question.QuestionTypeId == 1)
                            {
                                <InputTextArea rows="1" class="form-control textbox" placeholder="Skrifið hér..."
                                    @bind-Value="@submissionInput.ShortText[question.QuestionTypeOrderNum].Value" />
                                <ValidationMessage For="@(() => submissionInput.ShortText[question.QuestionTypeOrderNum].Value)" />
                            }
                            else if (@question.QuestionTypeId == 3)
                            {
                                <InputTextArea rows="5" class="form-control textbox" placeholder="Skrifið hér..."
                                    @bind-Value="@submissionInput.LongText[question.QuestionTypeOrderNum].Value" />
                                <ValidationMessage For="@(() => submissionInput.LongText[question.QuestionTypeOrderNum].Value)" />
                            }
                            else if (@question.QuestionTypeId == 5)
                            {
                                @foreach (var option in question.Options)
                                {
                                    string checkboxName = question.QuestionOrderNum.ToString();
                                    <input type="checkbox" name="@checkboxName" value="@option.OptionName"
                                        @onchange="@(() => SaveCheckboxValue(question.QuestionTypeOrderNum, checkboxName))" />
                                    <label for="@option.OptionName">@option.OptionName</label><br>
                                }
                                <ValidationMessage For="@(() => submissionInput.Checkbox[question.QuestionTypeOrderNum].Value)" />
                            }
                            else if (@question.QuestionTypeId == 6)
                            {
                                string dateName = question.QuestionOrderNum.ToString();
                                <label for="@dateName"></label>
                                <input class="form-control date-picker date-type"
                                    @onchange="@(() => SelectedDateChanged(question.QuestionTypeOrderNum, dateName))"
                                    type="date" id="@dateName" name="@dateName" min="1900-01-01" max="3000-01-01" />
                                <ValidationMessage For="@(() => submissionInput.Date[question.QuestionTypeOrderNum].Value)" />
                            }
                            else
                            {
                                <h5>Óþekkt spurningategund...</h5>
                            }
                        </div>
                    </div>
                </div>
            }
            <div class="container">
                <div class="card">
                    <div class="card-body form-check">
                        @if (form.IsAnonymous)
                        {
                            <div class="card-body form-check">
                                <input class="check-box" type="checkbox" name="anonymous" bind="@anonymous"
                                    @onchange="@((eventArgs) => UpdateAnon((bool)eventArgs.Value))" />
                                <label for="anonymous">Vinsamlegast hakaðu við ef þú vilt senda inn nafnlaust</label><br>
                            </div>
                        }
                        @if (IsClicked)
                        {
                            <button type="submit" class="submit-form btn approve-btn" disabled>
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                Í vinnslu...
                            </button>
                        }
                        else
                        {
                            <button type="submit" class="submit-form btn approve-btn">Senda inn</button>
                        }
                        <button @onclick="Cancel" type="button" class="submit-form btn delete-btn">Hætta við</button>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
    <br>
    <br>
    <br>
}

@if (_subFail)
{
    <ConfirmationModalComponent OnClick="SubmissionFailHandler">
        <CustomHeader>Eitthvað fór úrskeiðis</CustomHeader>
        <CustomBody>Eyðublaðið komst ekki til skila, vinsamlegast reyndur aftur.</CustomBody>
        <CustomButtonText>Aftur á upphafssíðu</CustomButtonText>
        <CustomCloseButtonText>Reyna aftur</CustomCloseButtonText>
    </ConfirmationModalComponent>
}

@code{
    [Parameter]
    public string id { get; set; }
    //To access info about current user
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    IdentityUser currentUser;
    public bool anonymous { get; set; }
    bool confirmation;
    bool _subFail;
    bool formFound;
    private bool IsClicked;
    SubmissionInputModel submissionInput;
    private EditContext editContext;
    FormsViewModel form;

    protected override async Task OnInitializedAsync()
    {
        //Get current user
        var userName = (await authenticationStateTask).User.Identity.Name;
        currentUser = await adminService.Get(userName);
        try
        {
            form = await formsService.Get(Int16.Parse(id));
            formFound = true;
        }
        catch (Exception)
        {
            formFound = false;
        }

        submissionInput = new SubmissionInputModel();

        var radioCount = form.Questions.Where(t => t.QuestionTypeId == 4).Count();
        var shortCount = form.Questions.Where(t => t.QuestionTypeId == 1).Count();
        var longCount = form.Questions.Where(t => t.QuestionTypeId == 3).Count();
        var checkboxCount = form.Questions.Where(t => t.QuestionTypeId == 5).Count();
        var dateCount = form.Questions.Where(t => t.QuestionTypeId == 6).Count();

        submissionInput.ShortText = new RequiredShortText[shortCount];
        submissionInput.LongText = new RequiredLongText[longCount];
        submissionInput.Radio = new RequiredRadio[radioCount];
        submissionInput.Checkbox = new RequiredCheckbox[checkboxCount];
        submissionInput.Date = new RequiredDate[dateCount];
        submissionInput.MultipleAnswers = new List<string>();

        for (int i = 0; i < submissionInput.ShortText.Length; i++)
        {
            submissionInput.ShortText[i] = new RequiredShortText();
        }
        for (int i = 0; i < submissionInput.LongText.Length; i++)
        {
            submissionInput.LongText[i] = new RequiredLongText();
        }
        for (int i = 0; i < submissionInput.Radio.Length; i++)
        {
            submissionInput.Radio[i] = new RequiredRadio();
        }
        for (int i = 0; i < submissionInput.Checkbox.Length; i++)
        {
            submissionInput.Checkbox[i] = new RequiredCheckbox();
        }
        for (int i = 0; i < submissionInput.Date.Length; i++)
        {
            submissionInput.Date[i] = new RequiredDate();
        }

        editContext = new EditContext(submissionInput);
    }

    protected void Cancel()
    {
        NavigationManager.NavigateTo("/", true);
    }

    protected async Task SelectedDateChanged(int questionTypeOrderNum, string name)
    {
        string str = await jsRuntime.InvokeAsync<string>("GetSelectedDate", name);
        submissionInput.Date[questionTypeOrderNum].Value = str;
    }

    private async Task SaveCheckboxValue(int questionTypeOrderNum, string name)
    {
        var value = await jsRuntime.InvokeAsync<object>("GetCheckedBoxes", name);
        submissionInput.Checkbox[questionTypeOrderNum].Value = value.ToString();
    }

    void UpdateAnon(bool anon)
    {
        anonymous = anon;
    }

    private async void SubmitForm()
    {
        //Disable submit button
        IsClicked = true;
        StateHasChanged();

        if (!editContext.Validate())
        {
            await jsRuntime.InvokeAsync<object>("ScrollToTop");
            //Enable submit button
            IsClicked = false;
            StateHasChanged();
        }
        else
        {
            try
            {
                //Save submission in database
                SubmissionsInfo submissionsInfo = new SubmissionsInfo();
                submissionsInfo.UserId = currentUser.UserName;
                DateTime dt = DateTime.UtcNow;
                submissionsInfo.SubmissionDate = DateTime.UtcNow; //https://stackoverflow.com/questions/22225701/inserting-current-database-date-time-via-entity-framework
                submissionsInfo.FormName = form.FormName;
                submissionsInfo.DestinationEmail = form.DestinationEmail;
                submissionsInfo = await subinfoservice.Add(submissionsInfo);

                foreach (var question in form.Questions)
                {
                    Submissions submission = new Submissions();
                    submission.SubmissionId = submissionsInfo.SubmissionId;
                    submission.QuestionName = question.QuestionName;
                    submission.QuestionOrderNum = question.QuestionOrderNum;
                    if (question.QuestionTypeId == 1)
                    {
                        submission.Answer = submissionInput.ShortText[question.QuestionTypeOrderNum].Value;
                    }
                    else if (question.QuestionTypeId == 3)
                    {
                        submission.Answer = submissionInput.LongText[question.QuestionTypeOrderNum].Value;
                    }
                    else if (question.QuestionTypeId == 4)
                    {
                        submission.Answer = submissionInput.Radio[question.QuestionTypeOrderNum].Value;
                    }
                    else if (question.QuestionTypeId == 5)
                    {
                        submission.Answer = submissionInput.Checkbox[question.QuestionTypeOrderNum].Value;
                    }
                    else if (question.QuestionTypeId == 6)
                    {
                        submission.Answer = submissionInput.Date[question.QuestionTypeOrderNum].Value;
                    }

                    await subservice.Add(submission);
                }

                sendMail(currentUser.Email, submissionsInfo.SubmissionId);
                confirmation = true;
                //Enable submit button
                IsClicked = false;
                StateHasChanged();
            }
            catch (System.InvalidOperationException)
            {
                // Catch Exception that occur when user push twice on "senda eyðublað" - it doesn't have any affect.
                _subFail = false;
                //Enable submit button
                IsClicked = false;
                StateHasChanged();
            }
            catch (Exception)
            {
                //unknown exception
                _subFail = true;
                //Enable submit button
                IsClicked = false;
                StateHasChanged();
            }
        }
    }

    private void sendMail(string userEmail, int submissionId)
    {
        try
        {
            var FormId = Int16.Parse(id);
            mailservice.MailBuilder(FormId, submissionId, userEmail, anonymous);
            StateHasChanged();
        }
        catch (Exception)
        {
            _subFail = true;
        }
    }

    private void SubmissionFailHandler()
    {
        NavigationManager.NavigateTo("/", true);
    }
}
