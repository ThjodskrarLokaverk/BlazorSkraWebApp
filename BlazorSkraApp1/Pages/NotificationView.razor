@page "/Notification/{id}"
@using BlazorSkraApp1.Data
@using BlazorSkraApp1.Services
@using BlazorSkraApp1.Models.InputModels
@using System
@using BlazorSkraApp1.Components
@using Microsoft.AspNetCore.Identity;
@inject IQuestionsFormAssignmentService questionservice
@inject IOptionsQuestionAssignmnentsService optionservice
@inject IOptionsService oservice
@inject ISubmissionsInfoService subinfoservice
@inject ISubmissionsService subservice
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime jsRuntime
@inject IMailService mailservice
@inject IAdminService adminService
@inject IFormsInfoService formService

@if (questionsList == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Augnablik...</span>
        </div>
    </div>
}
else
{
    <div class="container @faded sub-container">
        <EditForm Model="@submissionInput" OnValidSubmit="@SubmitForm">
            <ObjectGraphDataAnnotationsValidator />
            <h3 class="notification-list-heading" style="color:black"> @form.FormName</h3>
            @foreach (var question in questionsList)
            {
                <div class="container">
                    <div class="card">
                        <div class="card-body form-check">
                            <h5 class="question-title">@(question.QuestionOrderNum+1). @question.Questions.QuestionName</h5>
                            @if (@question.Questions.QuestionTypes.QuestionTypeId == 4)
                            {
                                @foreach (var option in optionsList.Where(option => option.QuestionOrderNum == question.QuestionOrderNum))
                                {
                                    <label>
                                        <InputRadioComponent SelectedValue="@option.Options.OptionName" @bind-Value="@submissionInput.Radio[question.QuestionTypeOrderNum].Value" />
                                        @option.Options.OptionName
                                    </label><br>
                                }
                                <ValidationMessage For="@(() => submissionInput.Radio[question.QuestionTypeOrderNum].Value)" />
                            }
                            else if (@question.Questions.QuestionTypes.QuestionTypeId == 1)
                            {
                                <InputTextArea rows="1" class="form-control textbox" placeholder="Skrifið hér..." @bind-Value="@submissionInput.ShortText[question.QuestionTypeOrderNum].Value" />
                                <ValidationMessage For="@(() => submissionInput.ShortText[question.QuestionTypeOrderNum].Value)" />
                            }
                            else if (@question.Questions.QuestionTypes.QuestionTypeId == 3)
                            {
                                <InputTextArea rows="5" class="form-control textbox" placeholder="Skrifið hér..." @bind-Value="@submissionInput.LongText[question.QuestionTypeOrderNum].Value" />
                                <ValidationMessage For="@(() => submissionInput.LongText[question.QuestionTypeOrderNum].Value)" />
                            }
                            else if (@question.Questions.QuestionTypes.QuestionTypeId == 5)
                            {
                                @foreach (var option in optionsList.Where(option => option.QuestionOrderNum == question.QuestionOrderNum))
                                {
                                    string checkboxName = question.QuestionOrderNum.ToString();
                                    <input class="check-box" type="checkbox" name="@checkboxName" value="@option.Options.OptionName"
                                           @onchange="@(() => SaveCheckboxValue(question.QuestionTypeOrderNum, checkboxName))" />
                                    <label for="@option.Options.OptionName">@option.Options.OptionName</label><br>
                                }
                                <ValidationMessage For="@(() => submissionInput.Checkbox[question.QuestionTypeOrderNum].Value)" />
                            }
                            else if (@question.Questions.QuestionTypes.QuestionTypeId == 6)
                            {
                                string dateName = question.QuestionOrderNum.ToString();
                                <label for="@dateName"></label>
                                <input class="form-control date-picker" @onchange="@(() => SelectedDateChanged(question.QuestionTypeOrderNum, dateName))"
                                       type="date" id="@dateName" name="@dateName" min="1900-01-01" max="3000-01-01" />
                                <ValidationMessage For="@(() => submissionInput.Date[question.QuestionTypeOrderNum].Value)" />
                            }
                            else
                            {
                                <h5>Eitthvað fór úrskeiðis...</h5>
                            }
                        </div>
                    </div>
                </div>
            }
                <div class="container">
                    <div class="card sub-margin">
                        @if(hasAnonymousOption)
                        {
                            <div class="card-body form-check">
                                <input class="check-box @faded radio-check-Submit" type="checkbox" name="anonymous" bind="@anonymous" @onchange="@((eventArgs) => updateAnon((bool)eventArgs.Value))" />
                                <label for="anonymous" class="radio-check-Submit"> Vinsamlegast hakaðu við ef þú vilt senda eyðublaðið nafnlaust</label><br>
                            </div>
                        }
                    </div>
                    <button type="submit" class="@faded submit-form btn approve-btn">Senda inn eyðublað</button>
                </div>
        </EditForm>
    </div>
    <br>
    <br>
    <br>
}

@if (confirmation)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"> Staðfesting</h5>
                </div>
                <div class="modal-body">
                    <p>Eyðublaðinu hefur verið komið til skila.</p>
                </div>
                <div class="modal-footer">
                    <a type="button" class="btn approve-btn" href="/">Aftur á upphafssíðu</a>
                </div>
            </div>
        </div>
    </div>
}

@if (_subFail)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content" id="modal-content-exception">
                <div class="modal-header">
                    <h5 class="modal-title" id="ExceptionModal"> Eitthvað fór úrskeiðis</h5>
                </div>
                <div class="modal-body">
                    <p>Eyðublaðið komst ekki til skila, vinsamlegast reyndur aftur.</p>
                </div>
                <div class="modal-footer">
                    <a type="button" class="btn approve-btn" href="/">Aftur á upphafssíðu</a>
                </div>
            </div>
        </div>
    </div>
}

@code{
    [Parameter]
    public string id { get; set; }

    //To access info about current user
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    IdentityUser currentUser;

    //References whether a submission is anonymous or not
    public bool anonymous { get; set; }
    private bool hasAnonymousOption;

    //Listar til þess að birta tilkynningu
    List<QuestionsFormAssignments> questionsList;
    List<OptionsQuestionAssignmnents> optionsList;

    //Breytur til þess að skrifa í gagnagrunninn
    SubmissionsInfo submissionsInfo = new SubmissionsInfo();
    Submissions submission = new Submissions();

    //Til þess að fylla inn í SubmissionInputModel
    SubmissionInputModel submissionInput = new SubmissionInputModel();

    //Confirmation popup
    bool confirmation = false;
    //Class til þess að lækka opacity þegar það er skilað
    string faded = "";

    bool _subFail = false;

    FormsInfo form = new FormsInfo();

    protected override async Task OnInitializedAsync()
    {
        //Get current user
        var userName = (await authenticationStateTask).User.Identity.Name;
        currentUser = await adminService.Get(userName);

        submissionInput.FormId = Int16.Parse(id);
        questionsList = await questionservice.Get(submissionInput.FormId);
        optionsList = await optionservice.Get(submissionInput.FormId);

        var radioCount = questionsList.Where(t => t.Questions.QuestionTypes.QuestionTypeId == 4).Count();
        var shortCount = questionsList.Where(t => t.Questions.QuestionTypes.QuestionTypeId == 1).Count();
        var longCount = questionsList.Where(t => t.Questions.QuestionTypes.QuestionTypeId == 3).Count();
        var checkboxCount = questionsList.Where(t => t.Questions.QuestionTypes.QuestionTypeId == 5).Count();
        var dateCount = questionsList.Where(t => t.Questions.QuestionTypes.QuestionTypeId == 6).Count();

        submissionInput.ShortText = new RequiredShortText[shortCount];
        submissionInput.LongText = new RequiredLongText[longCount];
        submissionInput.Radio = new RequiredRadio[radioCount];
        submissionInput.Checkbox = new RequiredCheckbox[checkboxCount];
        submissionInput.Date = new RequiredDate[dateCount];
        submissionInput.MultipleAnswers = new List<string>();

        for (int i = 0; i < submissionInput.ShortText.Length; i++)
        {
            submissionInput.ShortText[i] = new RequiredShortText();
        }
        for (int i = 0; i < submissionInput.LongText.Length; i++)
        {
            submissionInput.LongText[i] = new RequiredLongText();
        }
        for (int i = 0; i < submissionInput.Radio.Length; i++)
        {
            submissionInput.Radio[i] = new RequiredRadio();
        }
        for (int i = 0; i < submissionInput.Checkbox.Length; i++)
        {
            submissionInput.Checkbox[i] = new RequiredCheckbox();
        }
        for (int i = 0; i < submissionInput.Date.Length; i++)
        {
            submissionInput.Date[i] = new RequiredDate();
        }
        try{
           form = await formService.Get(System.Convert.ToInt32(id));
           hasAnonymousOption = form.IsAnonymous;
        }
        catch(Exception)
        {
            //pass
        }
    }

    protected async Task SelectedDateChanged(int questionTypeOrderNum, string name)
    {
        string str = await jsRuntime.InvokeAsync<string>("GetSelectedDate", name);
        submissionInput.Date[questionTypeOrderNum].Value = str;
    }

    private async Task SaveCheckboxValue(int questionTypeOrderNum, string name)
    {
        var value = await jsRuntime.InvokeAsync<object>("GetCheckedBoxes", name);
        submissionInput.Checkbox[questionTypeOrderNum].Value = value.ToString();
    }

    void updateAnon(bool anon)
    {
        anonymous = anon;
    }

    private async void SubmitForm()
    {
        try
        {
            //Create a submission in the database
            submissionsInfo.UserId = currentUser.UserName;
            submissionsInfo.SubmissionDate = DateTime.UtcNow;  //https://stackoverflow.com/questions/22225701/inserting-current-database-date-time-via-entity-framework
            submissionsInfo = await subinfoservice.Add(submissionsInfo);


            //Save the Id of the form and the submission with all answers
            submission.FormId = submissionInput.FormId;
            submission.SubmissionId = submissionsInfo.SubmissionId;


            //Save the answer to each question and save to database
            foreach (var question in questionsList)
            {
                submission.QuestionsQuestionId = question.QuestionId;
                submission.QuestionOrderNum = question.QuestionOrderNum;
                // Short text
                if (question.Questions.QuestionTypes.QuestionTypeId == 1)
                {
                    submission.Answer = submissionInput.ShortText[question.QuestionTypeOrderNum].Value;
                }
                else if (question.Questions.QuestionTypes.QuestionTypeId == 3)
                {
                    submission.Answer = submissionInput.LongText[question.QuestionTypeOrderNum].Value;
                }
                else if (question.Questions.QuestionTypes.QuestionTypeId == 4)
                {
                    submission.Answer = submissionInput.Radio[question.QuestionTypeOrderNum].Value;
                }
                else if (question.Questions.QuestionTypes.QuestionTypeId == 5)
                {
                    submission.Answer = submissionInput.Checkbox[question.QuestionTypeOrderNum].Value;
                }
                else if (question.Questions.QuestionTypes.QuestionTypeId == 6)
                {
                    submission.Answer = submissionInput.Date[question.QuestionTypeOrderNum].Value;
                }

                //Save answer to the question in the database
                await subservice.Add(submission);
            }
            sendMail(currentUser.Email);
            faded = "faded";
            confirmation = true;
            StateHasChanged();
        }
        catch (System.InvalidOperationException)
        {
            // Catch Exception that occur when user push twice on "senda tilkynningu" - it doesn't have any affect.
            _subFail = false;
            //bæta við í logfile?
            StateHasChanged();
        }
        catch (Exception)
        {
            //unknown exception
            _subFail = true;
            StateHasChanged();
        }
    }

    private void sendMail(string userEmail)
    {
        try
        {
            var FormId = Int16.Parse(id);
            mailservice.mailBuilder(FormId, submission.SubmissionId, userEmail, anonymous);
            StateHasChanged();
        }
        catch (Exception)
        {
            _subFail = true;
        }
    }
}