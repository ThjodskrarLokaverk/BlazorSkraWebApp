@page "/Notification/{id}"
@using BlazorSkraApp1.Data
@using BlazorSkraApp1.Services
@using BlazorSkraApp1.Models.InputModels
@using System
@using BlazorSkraApp1.Shared.Components
@using BlazorSkraApp1.Components
@using Microsoft.AspNetCore.Identity;
@inject IQuestionsFormAssignmentService questionservice
@inject IOptionsQuestionAssignmnentsService optionservice
@inject IOptionsService oservice
@inject ISubmissionsInfoService subinfoservice
@inject ISubmissionsService subservice
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime jsRuntime
@inject IMailService mailservice
@inject IAdminService adminService

@if (questionsList == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="container @faded sub-container">
        <EditForm Model="@submissionInput" OnValidSubmit="@SubmitForm">
            <ObjectGraphDataAnnotationsValidator />
            <ValidationSummary />
            @foreach (var question in questionsList)
            {
                <div class="container">
                    <div class="card">
                        <div class="card-body form-check">
                            <h5 class="card-title">@question.Questions.QuestionName</h5>
                            @if (@question.Questions.QuestionTypes.QuestionTypeName == "Radio")
                            {
                        <fieldset id="radio-group">
                            @foreach (var option in optionsList.Where(option => option.QuestionOrderNum == question.QuestionOrderNum))
                            {
                                <InputRadioComponent name="radio-group" SelectedValue="@option.Options.OptionName" @bind-Value="@submissionInput.Answers[question.QuestionOrderNum].Value" />
                                <label class="radio-check-Submit" for="@option.Options.OptionName">@option.Options.OptionName</label><br>
                                @* <ValidationMessage For="@(() => submissionInput.Answers[question.QuestionOrderNum].Value)" /> *@
                            }
                        </fieldset>
                            }
                            else if (@question.Questions.QuestionTypes.QuestionTypeName == "TextShort")
                            {
                                <InputTextArea rows="1" class="form-control textbox" placeholder="Skrifið hér..." @bind-Value="@submissionInput.Answers[question.QuestionOrderNum].Value" />
                            }
                            else if (@question.Questions.QuestionTypes.QuestionTypeName == "TextLong")
                            {
                                <InputTextArea rows="5" class="form-control textbox" placeholder="Skrifið hér..." @bind-Value="@submissionInput.Answers[question.QuestionOrderNum].Value" />
                            }
                            else if (@question.Questions.QuestionTypes.QuestionTypeName == "Multiple")
                            {
                                @foreach (var option in optionsList.Where(option => option.QuestionOrderNum == question.QuestionOrderNum))
                                {
                                    <input class="form-check-input" type="checkbox" name="@option.Options.OptionName" value="@option.Options.OptionName"
                                           @onchange="@((eventArgs) => SaveCheckboxValue((bool)eventArgs.Value, question.QuestionOrderNum, option.OptionOrderNum))" />
                                    <label for="@option.Options.OptionName"> @option.Options.OptionName</label><br>
                                }
                            }
                            else if (@question.Questions.QuestionTypes.QuestionTypeName == "Date")
                            {
                                <DatePicker DateSelected="SaveDate"></DatePicker>
                                SaveDateDown(question.QuestionOrderNum);
                            }

                            else
                            {
                                <h5>Something went wrong...</h5>
                            }
                        </div>
                    </div>
                </div>
            }
            <div class="container">
                <div class="card sub-margin">
                    <div class="card-body form-check">
                        <input class="form-check-input @faded radio-check-Submit" type="checkbox" name="anonymous" bind="@anonymous" @onchange="@((eventArgs) => updateAnon((bool)eventArgs.Value))" />
                        <label for="anonymous" class="radio-check-Submit"> Vinsamlegast hakaðu við ef þú vilt senda tilkynninguna nafnlaust</label><br>
                    </div>
                </div>
                <button type="submit" class="@faded submit-form btn approve-btn">Senda inn tilkynningu</button>
            </div>
        </EditForm>
    </div>
    <br>
    <br>
    <br>
}

@if (confirmation)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"> Staðfesting</h5>
                </div>
                <div class="modal-body">
                    <p>Tilkynningin er skráð og verður komið til skila.</p>
                </div>
                <div class="modal-footer">
                    <a type="button" class="btn btn-primary" href="/">Aftur á upphafssíðu</a>
                </div>
            </div>
        </div>
    </div>
}

@if (_subFail)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content" id="modal-content-exception">
                <div class="modal-header">
                    <h5 class="modal-title" id="ExceptionModal"> Eitthvað fór úrskeiðis</h5>
                </div>
                <div class="modal-body">
                    <p>Tilkynningin komst ekki til skila, vinsamlegast reyndur aftur.</p>
                </div>
                <div class="modal-footer">
                    <a type="button" class="btn btn-primary" href="/">Aftur á upphafssíðu</a>
                </div>
            </div>
        </div>
    </div>
}

@code{
    [Parameter]
    public string id { get; set; }

    //To access info about current user
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    IdentityUser currentUser;

    //References whether a submission is anonymous or not
    public bool anonymous { get; set; }

    //Listar til þess að birta tilkynningu
    List<QuestionsFormAssignments> questionsList;
    List<OptionsQuestionAssignmnents> optionsList;

    //Breytur til þess að skrifa í gagnagrunninn
    SubmissionsInfo submissionsInfo = new SubmissionsInfo();
    Submissions submission = new Submissions();

    //Til þess að fylla inn í SubmissionInputModel
    SubmissionInputModel submissionInput = new SubmissionInputModel();
    public DateTime SelectedDate;

    //Confirmation popup
    bool confirmation = false;
    //Class til þess að lækka opacity þegar það er skilað
    string faded = "";

    bool _subFail = false;

    protected override async Task OnInitializedAsync()
    {
        //Get current user
        var userName = (await authenticationStateTask).User.Identity.Name;
        currentUser = await adminService.Get(userName);

        submissionInput.FormId = Int16.Parse(id);
        questionsList = await questionservice.Get(submissionInput.FormId);
        optionsList = await optionservice.Get(submissionInput.FormId);
        submissionInput.Answers = new RequiredString[questionsList.Count];
        submissionInput.AnswersOrderNum = new int[questionsList.Count];
        submissionInput.MultipleAnswers = new List<string>();

        for (int i = 0; i < submissionInput.Answers.Length; i++)
        {
            submissionInput.Answers[i] = new RequiredString();
            submissionInput.AnswersOrderNum[i] = 0;
            submissionInput.Answers[i].Value = "";
        }
    }

    private void SaveDate(DateTime date)
    {
        submissionInput.SelectedDate = date;
    }

    private void SaveDateDown(int questionOrderNum)
    {
        submissionInput.Answers[questionOrderNum].Value = submissionInput.SelectedDate.ToShortDateString();
    }

    private void SaveRadioValue(string chosenOption, int questionOrderNum, int optionOrderNum)
    {
        submissionInput.Answers[questionOrderNum].Value = chosenOption;
        submissionInput.AnswersOrderNum[questionOrderNum] = optionOrderNum;
    }

    private void SaveCheckboxValue(bool chosenOption, int questionOrderNum, int optionOrderNum)
    {
        if (chosenOption)
        {
            foreach (var option in optionsList.Where(option => option.QuestionOrderNum == questionOrderNum
                     && option.OptionOrderNum == optionOrderNum))
            {
                submissionInput.MultipleAnswers.Add(option.Options.OptionName);
            }
        }
        submissionInput.AnswersOrderNum[questionOrderNum] = optionOrderNum;
        string combine = "";
        foreach (var s in submissionInput.MultipleAnswers)
        {
            combine += s + ", ";
        }
        submissionInput.Answers[questionOrderNum].Value = combine;
    }

    void updateAnon(bool anon)
    {
        anonymous = anon;
    }

    private async void SubmitForm()
    {
        try
        {
            //Create a submission in the database
            submissionsInfo.UserId = currentUser.Id;
            submissionsInfo = await subinfoservice.Add(submissionsInfo);

            //Save the Id of the form and the submission with all answers
            submission.FormId = submissionInput.FormId;
            submission.SubmissionId = submissionsInfo.SubmissionId;

            //Save the answer to each question and save to database
            foreach (var question in questionsList)
            {
                submission.QuestionsQuestionId = question.QuestionId;
                submission.QuestionOrderNum = question.QuestionOrderNum;
                submission.Answer = submissionInput.Answers[question.QuestionOrderNum].Value;
                submission.AnswerOrderNum = submissionInput.AnswersOrderNum[question.QuestionOrderNum];

                //Save answer to the question in the database
                await subservice.Add(submission);
            }
            sendMail(currentUser.Email);
            faded = "faded";
            confirmation = true;
            StateHasChanged();
        }
        catch (System.InvalidOperationException)
        {
            // Catch Exception that occur when user push twice on "senda tilkynningu" - it doesn't have any affect.
            _subFail = false;
            //bæta við í logfile?
            StateHasChanged();
        }
        catch (Exception)
        {
            _subFail = true;
        }
    }

    private void sendMail(string userEmail)
    {
        try{
            var FormId = Int16.Parse(id);
            mailservice.mailBuilder(FormId, submission.SubmissionId, userEmail, anonymous);
            StateHasChanged();
        }    
        catch(Exception)
        {
            _subFail = true;
        }
    }   
}