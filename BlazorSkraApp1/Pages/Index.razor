@page "/"
@using BlazorSkraApp1.Data
@using BlazorSkraApp1.Components
@using BlazorSkraApp1.Services
@inject ICategoriesService service
@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager

@if (categoriesList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var category in categoriesList)
    {
        <div class="linkboxes">
            <div class="col-md-4 col-xs-6">
                <div class="boxes btn">
                    <a href="/NotificationList/@category.CategoryId" class="text-uppercase">@category.CategoryName</a>
                    <EditCategoryComponent currentCategory="@category" OnEdit="EditCategoryHandler" OnDelete="DeleteCategoryHandler"></EditCategoryComponent>
                </div>
            </div>
        </div>
    }

    <AddCategoryComponent OnAdd="AddCategoryHandler"></AddCategoryComponent>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    List<Categories> categoriesList;

    protected override async Task OnInitializedAsync()
    {
        //Fetch the list of categories from the database
        categoriesList = await service.Get();

        var authenticationState = await AuthenticationStateTask;
        if (authenticationState?.User?.Identity is null || !authenticationState.User.Identity.IsAuthenticated)
        {
            var returnUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);

            if (string.IsNullOrWhiteSpace(returnUrl))
                NavigationManager.NavigateTo("/Identity/Account/Login", true);
            else
                NavigationManager.NavigateTo("/", true);
        }
    }

    //Dynamically adds categories, created with the AddCategoryComponent
    void AddCategoryHandler(Categories category)
    {
        categoriesList.Add(category);
    }

    //Dynamically edits categories, edited with the EditCategoryComponent
    void EditCategoryHandler(Categories category)
    {
        try
        {
           categoriesList.First(c => c.CategoryId == category.CategoryId).CategoryName = category.CategoryName; 
        }
        catch (Exception)
        {
            
        }
    }

    //Dynamically deletes categories deleted with the EditCategoryComponent
    void DeleteCategoryHandler(Categories category)
    {
        categoriesList.Remove(category);
    }
}