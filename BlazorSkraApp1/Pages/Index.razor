@page "/"
@using BlazorSkraApp1.Data
@using BlazorSkraApp1.Services
@inject ICategoriesService service
@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager

@if (categories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var category in categories)
    {
        <div class="linkboxes">
            <div class="col-md-4 col-xs-6">
                <div class="boxes btn">
                    <a href="/NotificationList/@category.CategoryId" class="text-uppercase">@category.CategoryName</a>
                    <AuthorizeView Roles="Admin">
                        <button class="btn btn-link edit-icon" @onclick="(() => ShowEditPopup(category))" data-toggle="modal" data-target="#confirmDeleteModal" value="Delete" >
                            <i class="fas fa-pen" title="Modifier"></i>
                        </button>
                    </AuthorizeView>
                </div>
            </div>
        </div>
    }
    <AuthorizeView Roles="Admin">
        <div class="linkboxes">
            <div class="col-md-4 col-xs-6">
                <button class="add-category-link boxes btn text-uppercase" @onclick="ShowAddPopup">
                    <span class="oi oi-plus"></span> Búa til flokk
                </button>
            </div>
        </div>
    </AuthorizeView>

    @if(showAdd)
    {   
        <div @onclick="Cancel"></div>
        <div id = "addCategory" class="modal" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Bæta við nýjum flokk</h4>
                        <button type="button" class="close" @onclick="Cancel">
                            <span aria-hidden="true">x</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@newCategory" OnValidSubmit="@AddCategory">
                            <div class="form-group">
                                <label for="categoryName">Nafn flokks</label>
                                <input type="hidden" @bind-value="@newCategory.CategoryName" />
                                <InputText id="name" class="form-control" @bind-Value="@newCategory.CategoryName" />
                                <ValidationMessage For="@(() => newCategory.CategoryName)" />
                            </div>
                            <button type="submit" class="btn btn-primary">Bæta við</button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancel" data-dismiss="modal">Hætta við</button>
                            <DataAnnotationsValidator />
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }

    @if(showEdit)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog" >
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Uppfæra / Eyða</h4>
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@currentCategory" OnValidSubmit="@UpdateCategory">
                            <div class="form-group">
                                <label for="categoryName">Nafn flokks</label>
                                <input type="hidden" @bind-value="@currentCategory.CategoryName" />
                                <InputText id="name" class="form-control" @bind-Value="@currentCategory.CategoryName" />
                            </div>
                        </EditForm>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="Cancel" data-dismiss="modal">Hætta við</button>
                        <button type="button" class="btn btn-primary" @onclick="(() => UpdateCategory())" >Uppfæra</button>
                        <button type="button" class="btn btn-danger" @onclick="(() => ShowDeletePopup(currentCategory))" >Eyða</button>
                    </div>
                </div>
            </div>
        </div>
    }

    @if(showDelete)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title"> Staðfesting</h5>
                        <button type="button" class="close" data-dismiss="modal">&times;</button>                
                    </div>
                    <div class="modal-body">
                        <p>Ertu viss um að þú viljir eyða flokknum @currentCategory.CategoryName ? </p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="Cancel" data-dismiss="modal">Hætta við</button>
                        <button type="button" class="btn btn-danger" @onclick="(() => Delete(currentCategory))" >Eyða</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    List<Categories> categories;
    Categories newCategory = new Categories();
    Categories currentCategory = new Categories();
    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateTask;
        if(authenticationState?.User?.Identity is null || !authenticationState.User.Identity.IsAuthenticated)
        {
            var returnUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);

            if(string.IsNullOrWhiteSpace(returnUrl))
              NavigationManager.NavigateTo("/Identity/Account/Login", true);
            else
              NavigationManager.NavigateTo("/", true);
        }
        categories = await service.Get();
    }
    bool showAdd = false;
    bool showDelete = false;
    bool showEdit = false;

    void ShowAddPopup()
    {
        showAdd = true;
    }

    void ShowEditPopup(Categories pickedCategory)
    {
        currentCategory = pickedCategory;
        showEdit = true;
    }

    void ShowDeletePopup(Categories cat)
    {
        showEdit = false;
        currentCategory = cat;
        showDelete = true;
    }
    void Cancel()
    {
        showAdd = false;
        showDelete = false;
        showEdit = false;
    }

    protected async void AddCategory()
    {
        await service.Add(newCategory);
        showAdd = false;
        DataChanged();
        newCategory = new Categories();
    }

    protected async void UpdateCategory()
    {
        await service.Update(currentCategory);
        showEdit = false;
        DataChanged();
    }

    private void PrepareForDelete(Categories task)
    {
        currentCategory = task;
    }
    private async Task Delete(Categories cat)
    {
        var task = await service.Delete(cat.CategoryId);
        DataChanged();
        showDelete = false;
    }

    private async void DataChanged()
    {
        categories = await service.Get();
        StateHasChanged();
    }
}