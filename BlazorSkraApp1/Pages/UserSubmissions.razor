@page "/minar-innsendingar"
@using BlazorSkraApp1.Data
@using BlazorSkraApp1.Services
@using Microsoft.AspNetCore.Identity;
@inject ISubmissionsInfoService submissionsInfoService
@inject IAdminService adminservice
@inject ISubmissionsService submissionservice
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime jsRuntime
@inject IMailService mailservice;

@* *** A table containing all of user's submissions younger than 7 days old *** *@

@if (submissionsInfoList == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Augnablik...</span>
        </div>
    </div>
}
else
{
    <AuthorizeView>
        <div class="container">
            <h2>Mínar innsendingar</h2>
            <table class="table table-striped table-md">
                <thead id="user-thead">
                    <tr>
                        <th class="text-uppercase">
                            Nafn eyðublaðs
                            <button class="btn up-down" @onclick="(() => SortFormName())"><i class="fas fa-sort-alpha-up"></i> </button>
                        </th>
                        <th class="text-uppercase">Notandi</th>
                        <th class="text-uppercase">
                            Innsent
                            <button class="btn up-down" @onclick="(() => SortDate())"><i class="fas fa-sort-alpha-up"></i> </button>
                        </th>
                        <th class="text-uppercase">PDF</th>
                    </tr>
                </thead>
                <tbody class="table-body">
                    @foreach (var submissionInfo in submissionsInfoList)
                    {
                        <tr>
                            <td>@submissionInfo.FormName</td>
                            <td>@submissionInfo.UserId</td>
                            <td>@submissionInfo.SubmissionDate.ToString("dd/MM/yy")</td>
                            <td><button class="btn approve-btn" @onclick="@((eventArgs) => GeneratePDFFile(submissionInfo.FormName, submissionInfo.SubmissionId, submissionInfo.UserId))">Sækja</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </AuthorizeView>
}

@code{
    //To access info about current user
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    //IdentityUser currentUser;

    List<SubmissionsInfo> submissionsInfoList;
    bool isSortedFormName = false;
    bool isSortedDate = false;

    protected override async Task OnInitializedAsync()
    {
        var userName = (await authenticationStateTask).User.Identity.Name;
        //currentUser = await adminService.Get(userName);

        submissionsInfoList = await submissionsInfoService.Get();
        submissionsInfoList = submissionsInfoList.Where(s => s.UserId == userName).ToList();

    }

    void SortFormName()
    {
        if (!isSortedFormName)
        {
            submissionsInfoList = submissionsInfoList.OrderBy(x => x.FormName).ToList();
            isSortedFormName = true;
        }
        else
        {
            submissionsInfoList = submissionsInfoList.OrderByDescending(x => x.FormName).ToList();
            isSortedFormName = false;
        }
        StateHasChanged();
    }

    void SortDate()
    {
        if (!isSortedDate)
        {
            submissionsInfoList = submissionsInfoList.OrderBy(x => x.SubmissionDate).ToList();
            isSortedDate = true;
        }
        else
        {
            submissionsInfoList = submissionsInfoList.OrderByDescending(x => x.SubmissionDate).ToList();
            isSortedDate = false;
        }
        StateHasChanged();
    }

    public void GeneratePDFFile(string FormName, int submissionId, string userEmail)
    {
        mailservice.PDFBuilder(FormName, submissionId, userEmail, false, jsRuntime);
    }
}