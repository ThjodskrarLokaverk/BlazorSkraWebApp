@page "/UserList"
@using BlazorSkraApp1.Services
@using System.Linq
@using Microsoft.AspNetCore.Identity;
@inject IAdminService service
@inject AuthenticationStateProvider AuthenticationStateProvider
<AuthorizeView Roles="Admin">
    <Authorized>
        <div class="container">
            <input class = "searchUsers" type="text" placeholder="Leita.." @bind-value="@searchString"/>
            <button class="btn search-button" @onclick="@searchUsers"><i class="fas fa-search"></i> </button>
            <table class="table table-striped table-md">
                <thead id="user-thead">
                    <tr>
                        <th class="text-uppercase"> Nafn <button class="btn up-down" @onclick="(() => doSort())" ><i class="fas fa-sort-alpha-up" ></i> </button> </th>
                        <th class="text-uppercase">Netfang</th>
                        <th class="text-uppercase">Breyta hlutverki</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in usersList)
                    {
                        <tr>
                            <td>@user.UserName</td>
                            <td>@user.Email</td>
                            <td>
                                @if (adminUsersList.Contains(user))
                                {
                                    <button class="btn cancel-btn" @onclick="(() => ShowRemovePopup(user))">Óvirkja stjórnanda</button>
                                }
                                else
                                {
                                    <button class="btn approve-btn" @onclick="(() => ShowAddPopup(user))">Virkja stjórnanda</button>
                                }
                            </td>
                            <td><button class="btn btn-danger" @onclick="(() => DeleteUser(user))">Eyða notanda</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        @if(showAddPopup)
        {
            <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title"> Breyta hlutverki notanda</h5>
                            <button type="button" class="close" data-dismiss="modal" @onclick="Cancel">&times;</button>
                        </div>
                        <div class="modal-body">
                            <p>Ertu viss um að þú viljir gera @user.UserName að stjórnanda?</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn cancel-btn" @onclick="Cancel" data-dismiss="modal">Nei</button>
                            <button type="button" class="btn approve-btn" @onclick="(() => AddAdminRole(user))">Já</button>
                        </div>
                    </div>
                </div>
            </div>
        }
        @if(showRemovePopup)
        {
            <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title"> Breyta hlutverki notanda</h5>
                            <button type="button" class="close" data-dismiss="modal" @onclick="Cancel">&times;</button>
                        </div>
                        <div class="modal-body">
                            <p>Ertu viss um að þú viljir taka stjórnendaréttindi af @user.UserName?</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn cancel-btn" @onclick="Cancel" data-dismiss="modal">Nei</button>
                            <button type="button" class="btn approve-btn" @onclick="(() => RemoveAdminRole(user))">Já</button>
                        </div>
                    </div>
                </div>
            </div>
        }

    </Authorized>
    <NotAuthorized>
        <p>You're not authorized to view this page.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    // Property used to add or edit the currently selected user
    IdentityUser user = new IdentityUser();
    // Collection to display the existing users
    List<IdentityUser> usersList = new List<IdentityUser>();
    // Collection to display the admin users
    List<IdentityUser> adminUsersList = new List<IdentityUser>();
    // Collection to display sorted user list
    List<IdentityUser> sortedList = new List<IdentityUser>();

    List<IdentityUser> searchList = new List<IdentityUser>();
    bool showAddPopup = false;
    bool showRemovePopup = false;
    private string searchString;

    protected override async Task OnInitializedAsync()
    {
        await GetUsers();
        await GetAdminUsers();
    }
    
    void doSort()
    {
        usersList = sortedList;
        StateHasChanged();
    }
    async Task GetUsers()
    {
        usersList = await service.Get();
        sortedList = await service.GetSortedList();
    }
    
    async Task searchUsers()
   {
       searchList = await service.GetSearchList(searchString);
       usersList = searchList;
       StateHasChanged();
   } 

    async Task GetAdminUsers()
    {
        adminUsersList = await service.GetAdminUsers();
    }

    private void Cancel()
    {
        showAddPopup = false;
        showRemovePopup = false;
    }

    private void ShowAddPopup(IdentityUser pickedUser)
    {
        user = pickedUser;
        showAddPopup = true;
    }

    private void ShowRemovePopup(IdentityUser pickedUser)
    {
        user = pickedUser;
        showRemovePopup = true;
    }

    async Task DeleteUser(IdentityUser user)
    {
        // Delete user
        await service.Delete(user);

        // Refresh Users
        await GetUsers();
    }

    async Task AddAdminRole(IdentityUser user)
    {
        //Add user to the Admin role
        await service.AddAdminRole(user);
        await GetAdminUsers();
        showAddPopup = false;
    }

    async Task RemoveAdminRole(IdentityUser user)
    {
        //Remove user from the Admin role
        await service.RemoveAdminRole(user);
        await GetAdminUsers();
        showRemovePopup = false;
    }
    
}
