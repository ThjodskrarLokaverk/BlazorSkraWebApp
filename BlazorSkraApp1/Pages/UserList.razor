@page "/UserList"
@using BlazorSkraApp1.Components
@using BlazorSkraApp1.Services
@using Microsoft.AspNetCore.Identity;
@inject IAdminService service
@inject AuthenticationStateProvider AuthenticationStateProvider
    <AuthorizeView Roles="Admin">
        <Authorized>
            @if (userList == null)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
            }
            else
            {
                <div class="container">
                    <input class="searchUsers" type="text" placeholder="Leita.." @bind-value="@searchString" />
                    <button class="btn search-button" @onclick="@SearchUsers"><i class="fas fa-search"></i> </button>
                    <table class="table table-striped table-md">
                        <thead id="user-thead">
                            <tr>
                                <th class="text-uppercase">
                                    Nafn
                                    <button class="btn up-down" @onclick="(() => SortUsersAscending())"><i class="fas fa-sort-alpha-up"></i> </button>
                                </th>
                                <th class="text-uppercase">Netfang</th>
                                <th class="text-uppercase">Breyta hlutverki</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in userList)
                            {
                                <tr>
                                    <td>@user.UserName</td>
                                    <td>@user.Email</td>
                                    <td>
                                        @if (adminUsersList.Contains(user))
                                        {
                                            <button @onclick="(() => SelectUser(user))" data-toggle="modal" data-target="#removeAdminModal" class="btn cancel-btn">
                                                Óvirkja stjórnanda
                                            </button>
                                        }
                                        else
                                        {
                                            <button @onclick="(() => SelectUser(user))" data-toggle="modal" data-target="#makeAdminModal" class="btn approve-btn">
                                                Virkja stjórnanda
                                            </button>
                                        }
                                    </td>
                                    <td>
                                        <button @onclick="(() => SelectUser(user))" data-toggle="modal" data-target="#confirmationModal" class="btn btn-danger">
                                            Eyða notanda
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Add and remove user from admin role popup modal -->
                <UserAdminRoleToggleComponent selectedUser="selectedUser" OnMakeAdmin="MakeAdminHandler" OnRemoveAdmin="RemoveAdminHandler"></UserAdminRoleToggleComponent>

                <!-- Delete Category popup modal -->
                <ConfirmationModalComponent OnClick="DeleteUser">
                    <CustomHeader>Eyða notanda</CustomHeader>
                    <CustomBody>Ertu viss um að þú viljir eyða notandanum @(selectedUser.UserName)?</CustomBody>
                    <CustomButtonText>Eyða</CustomButtonText>
                </ConfirmationModalComponent>
            }
        </Authorized>
        <NotAuthorized>
            <p>You're not authorized to view this page.</p>
        </NotAuthorized>
    </AuthorizeView>

@code {
    // Collection to display the users
    List<IdentityUser> userList;
    // Collection containing admin users
    List<IdentityUser> adminUsersList;
    // Property used to add or edit the currently selected user
    IdentityUser selectedUser = new IdentityUser();
    private string searchString;

    protected override async Task OnInitializedAsync()
    {
        //Get a list of admin users
        adminUsersList = await service.GetAdminUsers();
        //Get a list of users
        userList = await service.Get();
    }

    private void SelectUser(IdentityUser user)
    {
        selectedUser = user;
    }

    protected async void DeleteUser()
    {
        try
        {
            await service.Delete(selectedUser);
            userList.Remove(selectedUser);
        }
        catch(Exception)
        {

        }
    }

    protected void MakeAdminHandler(IdentityUser user)
    {
        adminUsersList.Add(user);
    }

    protected void RemoveAdminHandler(IdentityUser user)
    {
        adminUsersList.Remove(user);
    }

    async Task SearchUsers()
    {
        //Get list of users that match the search string
        userList = await service.GetSearchList(searchString);
        StateHasChanged();
    }

    void SortUsersAscending()
    {
        userList = userList.OrderBy(x => x.UserName).ToList();
        StateHasChanged();
    }

    void SortUsersDescending()
    {
        userList = userList.OrderByDescending(x => x.UserName).ToList();
        StateHasChanged();
    }
    }
