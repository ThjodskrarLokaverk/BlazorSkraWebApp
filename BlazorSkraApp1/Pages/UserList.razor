@page "/UserList"
@using BlazorSkraApp1.Components
@using BlazorSkraApp1.Services
@using Microsoft.AspNetCore.Identity;
@inject IAdminService service
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> _UserManager

    <AuthorizeView Roles="Admin">
        <Authorized>
            @if (userList == null)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
            }
            else
            {
                <div class="container">
                    <input class="searchUsers" type="text" placeholder="Leita.." @bind-value="@searchString" />
                    <button class="btn search-button" @onclick="@SearchUsers"><i class="fas fa-search"></i> </button>
                    <table class="table table-striped table-md">
                        <thead id="user-thead">
                            <tr>
                                <th class="text-uppercase">
                                    Nafn
                                    <button class="btn up-down" @onclick="(() => SortUsersAscending())"><i class="fas fa-sort-alpha-up"></i> </button>
                                </th>
                                <th class="text-uppercase">Netfang</th>
                                <th class="text-uppercase">Breyta hlutverki</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in userList)
                            {
                                <tr>
                                    <td>@user.UserName</td>
                                    <td>@user.Email</td>
                                    <td>
                                        @if (adminUsersList.Contains(user))
                                        {
                                            <button @onclick="(() => SelectUser(user))" data-toggle="modal" data-target="#removeAdminModal" class="btn cancel-btn">
                                                Óvirkja stjórnanda
                                            </button>
                                        }
                                        else
                                        {
                                            <button @onclick="(() => SelectUser(user))" data-toggle="modal" data-target="#makeAdminModal" class="btn approve-btn">
                                                Virkja stjórnanda
                                            </button>
                                        }
                                    </td>
                                    <td>
                                        <button @onclick="(() => SelectUser(user))" data-toggle="modal" data-target="#confirmationModal" class="btn btn-danger">
                                            Eyða notanda
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Add and remove user from admin role popup modal -->
                <UserAdminRoleToggleComponent selectedUser="selectedUser" OnMakeAdmin="MakeAdminHandler" OnRemoveAdmin="RemoveAdminHandler"></UserAdminRoleToggleComponent>

                <!-- Delete Category popup modal -->
                <ConfirmationModalComponent OnClick="DeleteUser">
                    <CustomHeader>Eyða notanda</CustomHeader>
                    <CustomBody>Ertu viss um að þú viljir eyða notandanum @(selectedUser.UserName)?</CustomBody>
                    <CustomButtonText>Eyða</CustomButtonText>
                </ConfirmationModalComponent>
            }
            @if (ShowPopup)
            {
                <!-- This is the popup to create or edit a user -->
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Edit User</h3>
                                <!-- Button to close the popup -->
                                <button type="button" class="close"
                                        @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <!-- Edit form for the current forecast -->
                            <div class="modal-body">
                                <!-- Only show Id if not a new user -->
                                @if (objUser.Id != "")
                                {
                                    <p>@objUser.Id</p>
                                }
                                <!-- Only allow edit if a new user -->
                                @if (objUser.Id != "")
                                {
                                    <p>@objUser.UserName</p>
                                }
                                else
                                {
                                    <input class="form-control" type="text"
                                           placeholder="UserName"
                                           @bind="objUser.UserName" />
                                }
                                <input class="form-control" type="text"
                                       placeholder="Email"
                                       @bind="objUser.Email" />
                                <input class="form-control" type="password"
                                       placeholder="Password"
                                       @bind="objUser.PasswordHash" />
                                <select class="form-control"
                                        @bind="@CurrentUserRole">
                                    @foreach (var option in Options)
                                    {
                                        <option value="@option">
                                            @option
                                        </option>
                                    }
                                </select>
                                <br /><br />
                                <!-- Button to save the user -->
                                <button class="btn btn-primary"
                                        @onclick="SaveUser">
                                    Save
                                </button>
                                <!-- Only show delete button if not a new record -->
                                @if (objUser.Id != "")
                                {
                                    <!-- Button to delete the forecast -->
                                    <button class="btn btn-danger"
                                            @onclick="DeleteUser">
                                        Delete
                                    </button>
                                }
                                <br />
                                <span style="color:red">@strError</span>
                            </div>
                        </div>
                    </div>
                </div>
            }
            <button class="btn btn-success" @onclick="AddNewUser">Add User</button>
        </Authorized>
        <NotAuthorized>
            <p>You're not authorized to view this page.</p>
        </NotAuthorized>
    </AuthorizeView>

@code {
    // Options to display in the roles dropdown when editing a user
    List<string> Options = new List<string>() { "Users", "Administrators" };

    // Tracks the selected role for the currently selected user
    string CurrentUserRole { get; set; } = "Users";
    string ADMINISTRATION_ROLE = "Administrators";
    System.Security.Claims.ClaimsPrincipal CurrentUser;
     // To hold any possible errors
    string strError = "";

    // To enable showing the Popup
    bool ShowPopup = false;
    // Collection to display the users

    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }
    List<IdentityUser> userList;
    // Collection containing admin users
    List<IdentityUser> adminUsersList;

    // Property used to add or edit the currently selected user
    IdentityUser objUser = new IdentityUser();    

    // Property used to add or edit the currently selected user
    IdentityUser selectedUser = new IdentityUser();
    private string searchString;

    protected override async Task OnInitializedAsync()
    {
        //Get a list of admin users
        adminUsersList = await service.GetAdminUsers();
        //Get a list of users
        userList = await service.Get();
    }

    private void SelectUser(IdentityUser user)
    {
        selectedUser = user;
    }

    protected async void DeleteUser()
    {
        try
        {
            await service.Delete(selectedUser);
            userList.Remove(selectedUser);
        }
        catch(Exception)
        {

        }
    }

    protected void MakeAdminHandler(IdentityUser user)
    {
        adminUsersList.Add(user);
    }

    protected void RemoveAdminHandler(IdentityUser user)
    {
        adminUsersList.Remove(user);
    }

    async Task SearchUsers()
    {
        //Get list of users that match the search string
        userList = await service.GetSearchList(searchString);
        StateHasChanged();
    }

    void SortUsersAscending()
    {
        userList = userList.OrderBy(x => x.UserName).ToList();
        StateHasChanged();
    }

    void SortUsersDescending()
    {
        userList = userList.OrderByDescending(x => x.UserName).ToList();
        StateHasChanged();
    }
    void AddNewUser()
    {
        // Make new user
        objUser = new IdentityUser();
        objUser.PasswordHash = "*****";

        // Set Id to blank so we know it is a new record
        objUser.Id = "";

        // Open the Popup
        ShowPopup = true;
    }

    async Task SaveUser()
    {
        try
        {
            // Is this an existing user?
            if (objUser.Id != "")
            {
                // Get the user
                var user = await _UserManager.FindByIdAsync(objUser.Id);
                
                // Update Email
                user.Email = objUser.Email;

                // Update the user
                await _UserManager.UpdateAsync(user);

                // Only update password if the current value
                // is not the default value
                if (objUser.PasswordHash != "*****")
                {
                    var resetToken =
                        await _UserManager.GeneratePasswordResetTokenAsync(user);

                    var passworduser =
                        await _UserManager.ResetPasswordAsync(
                            user,
                            resetToken,
                            objUser.PasswordHash);

                    if (!passworduser.Succeeded)
                    {
                        if (passworduser.Errors.FirstOrDefault() != null)
                        {
                            strError =
                                passworduser
                                .Errors
                                .FirstOrDefault()
                                .Description;
                        }
                        else
                        {
                            strError = "Pasword error";
                        }

                        // Keep the popup opened
                        return;
                    }
                }

                // Handle Roles

                // Is user in administrator role?
                var UserResult =
                    await _UserManager
                    .IsInRoleAsync(user, ADMINISTRATION_ROLE);

                // Is Administrator role selected
                // but user is not an Administrator?
                if (
                    (CurrentUserRole == ADMINISTRATION_ROLE)
                    &
                    (!UserResult))
                {
                    // Put admin in Administrator role
                    await _UserManager
                        .AddToRoleAsync(user, ADMINISTRATION_ROLE);
                }
                else
                {
                    // Is Administrator role not selected
                    // but user is an Administrator?
                    if ((CurrentUserRole != ADMINISTRATION_ROLE)
                        &
                        (UserResult))
                    {
                        // Remove user from Administrator role
                        await _UserManager
                            .RemoveFromRoleAsync(user, ADMINISTRATION_ROLE);
                    }
                }
            }
            else
            {
                // Insert new user

                var NewUser =
                    new IdentityUser
                    {
                        UserName = objUser.UserName,
                        Email = objUser.Email
                    };

                var CreateResult =
                    await _UserManager
                    .CreateAsync(NewUser, objUser.PasswordHash);

                if (!CreateResult.Succeeded)
                {
                    if (CreateResult
                        .Errors
                        .FirstOrDefault() != null)
                    {
                        strError =
                            CreateResult
                            .Errors
                            .FirstOrDefault()
                            .Description;
                    }
                    else
                    {
                        strError = "Create error";
                    }

                    // Keep the popup opened
                    return;
                }
                else
                {
                    // Handle Roles
                    if (CurrentUserRole == ADMINISTRATION_ROLE)
                    {
                        // Put admin in Administrator role
                        await _UserManager
                            .AddToRoleAsync(NewUser, ADMINISTRATION_ROLE);
                    }
                }
            }
            // Close the Popup
            ShowPopup = false;

            // Refresh Users
            //GetUsers();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }
    

}
