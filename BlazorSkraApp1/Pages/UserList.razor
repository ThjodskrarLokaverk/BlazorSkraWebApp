@page "/UserList"
@using BlazorSkraApp1.Components
@using BlazorSkraApp1.Services
@using Microsoft.AspNetCore.Identity
@using BlazorSkraApp1.Models.InputModels
@inject IAdminService service
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> _UserManager

<AuthorizeView Roles="Admin" Context="authContext">
    @if (userList == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="sr-only">Augnablik...</span>
            </div>
        </div>
    }
    else
    {
        <div class="container">
            <input class="searchUsers" type="text" placeholder="Leita.." @bind-value="@searchString" />
            <button class="btn search-button" @onclick="@SearchUsers"><i class="fas fa-search"></i> </button>
            <table class="table table-striped table-md">
                <thead id="user-thead">
                    <tr>
                        <th class="text-uppercase">Nafn
                            <button class="btn up-down" @onclick="(() => SortUsersAscending())"><i class="fas fa-sort-alpha-up"></i> </button>
                        </th>
                        <th class="text-uppercase">Netfang</th>
                        <th class="text-uppercase">Breyta hlutverki</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in userList)
                    {
                        <tr>
                            <td>@user.UserName</td>
                            <td>@user.Email</td>
                            <td>
                                @if(adminUsersList.Contains(user))
                                {
                                    <button @onclick="(() => SelectUser(user))" data-toggle="modal" data-target="#removeAdminModal" class="btn cancel-btn">
                                        Óvirkja stjórnanda
                                    </button>
                                }
                                else
                                {
                                    <button @onclick="(() => SelectUser(user))" data-toggle="modal" data-target="#makeAdminModal" class="btn approve-btn">
                                        Virkja stjórnanda
                                    </button>
                                }
                            </td>
                            <td>
                                <button @onclick="(() => SelectUser(user))" data-toggle="modal" data-target="#confirmationModal" class="btn btn-danger">
                                    Eyða notanda
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        @* Add and remove user from admin role popup modal *@
        <UserAdminRoleToggleComponent selectedUser="selectedUser" OnMakeAdmin="MakeAdminHandler" OnRemoveAdmin="RemoveAdminHandler"></UserAdminRoleToggleComponent>

        @* Delete Category popup modal *@
        <ConfirmationModalComponent OnClick="DeleteUser">
            <CustomHeader>Eyða notanda</CustomHeader>
            <CustomBody>Ertu viss um að þú viljir eyða notandanum @(selectedUser.UserName)?</CustomBody>
            <CustomButtonText>Eyða</CustomButtonText>
        </ConfirmationModalComponent>
    }
    @if (showPopup)
    {
        <!-- This is the popup to create a user -->
        <EditForm Model="@userInput" OnValidSubmit="@SaveUser">
            <DataAnnotationsValidator />
            <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">Búa til nýjan notanda</h3>
                            <button type="button" class="close" @onclick="ClosePopup">
                                <span aria-hidden="true">X</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <InputText class="form-control" type="text" placeholder="Notendanafn" @bind-Value="userInput.UserName" />
                            <ValidationMessage For="@(() => userInput.UserName)" /><br>
                            <InputText class="form-control" type="text" placeholder="Tölvupóstfang" @bind-Value="userInput.Email" />
                            <ValidationMessage For="@(() => userInput.Email)" /><br>
                            <InputText class="form-control" type="password" placeholder="Lykilorð" @bind-Value="userInput.Password" />
                            <ValidationMessage For="@(() => userInput.Password)" /><br>
                            <InputSelect class="form-control" @bind-Value="userInput.UserRole">
                                @foreach (var option in Options)
                                {
                                    <option value="@option">@option</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => userInput.UserRole)" />
                            <br /><br />
                            <button type="submit" class="btn btn-primary">Vista</button>
                            <br />
                            <span style="color:red">@strError</span>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    }
    <button class="btn btn-success" @onclick="AddNewUser">Bæta við notanda</button>
</AuthorizeView>

@code {
    UserInputModel userInput;
    // Options to display in the roles dropdown when editing a user
    List<string> Options = new List<string>() { "User", "Admin" };

    // Tracks the selected role for the currently selected user
    string CurrentUserRole { get; set; } = "User";
    string ADMINISTRATION_ROLE = "Admin";
    System.Security.Claims.ClaimsPrincipal CurrentUser;
     // To hold any possible errors
    string strError = "";

    // To enable showing the Popup
    bool showPopup = false;
    // Collection to display the users

    void ClosePopup()
    {
        // Close the Popup
        showPopup = false;
    }
    List<IdentityUser> userList;
    // Collection containing admin users
    List<IdentityUser> adminUsersList;

    // Property used to add or edit the currently selected user
    IdentityUser objUser = new IdentityUser();    

    // Property used to add or edit the currently selected user
    IdentityUser selectedUser = new IdentityUser();
    private string searchString;

    protected override async Task OnInitializedAsync()
    {
        //Get a list of admin users
        adminUsersList = await service.GetAdminUsers();
        //Get a list of users
        userList = await service.Get();
    }

    private void SelectUser(IdentityUser user)
    {
        selectedUser = user;
    }

    protected async void DeleteUser()
    {
        try
        {
            await service.Delete(selectedUser);
            userList.Remove(selectedUser);
            StateHasChanged();
        }
        catch(Exception)
        {

        }
    }

    protected void MakeAdminHandler(IdentityUser user)
    {
        adminUsersList.Add(user);
    }

    protected void RemoveAdminHandler(IdentityUser user)
    {
        adminUsersList.Remove(user);
    }

    async Task SearchUsers()
    {
        //Get list of users that match the search string
        userList = await service.GetSearchList(searchString);
        StateHasChanged();
    }

    void SortUsersAscending()
    {
        userList = userList.OrderBy(x => x.UserName).ToList();
        StateHasChanged();
    }

    void SortUsersDescending()
    {
        userList = userList.OrderByDescending(x => x.UserName).ToList();
        StateHasChanged();
    }
    void AddNewUser()
    {
        // Make new user
        //objUser = new IdentityUser();
        //objUser.PasswordHash = "*****";
        userInput = new UserInputModel();
        userInput.Password = "";

        // Set Id to blank so we know it is a new record
        //objUser.Id = "";

        // Open the Popup
        showPopup = true;
    }

    async Task SaveUser()
    {
        try
        {
            // Insert new user
            var NewUser = new IdentityUser
            {
                UserName = userInput.UserName,
                Email = userInput.Email
            };

            var CreateResult = await _UserManager.CreateAsync(NewUser, userInput.Password);

            if (!CreateResult.Succeeded)
            {
                if (CreateResult.Errors.FirstOrDefault() != null)
                {
                    strError = CreateResult.Errors.FirstOrDefault().Description;
                }
                else
                {
                    strError = "Create error";
                }

                // Keep the popup opened
                return;
            }
            else
            {
                // Handle Roles
                if (CurrentUserRole == ADMINISTRATION_ROLE)
                {
                    // Put admin in Administrator role
                    await _UserManager
                        .AddToRoleAsync(NewUser, ADMINISTRATION_ROLE);
                }
            }
            // Close the Popup
            showPopup = false;

            // Refresh Users
            userList = await service.Get();
            //GetUsers();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }
}
