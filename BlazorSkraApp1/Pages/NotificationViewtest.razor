@page "/Notification/{id}"
@attribute [Authorize]
@using BlazorSkraApp1.Data
@using BlazorSkraApp1.Services
@using System
@using BlazorSkraApp1.Shared.Components
@inject IQuestionsFormAssignmentService questionservice
@inject IOptionsQuestionAssignmnentsService optionservice
@inject IOptionsService oservice
@inject ISubmissionsInfoService subinfoservice
@inject ISubmissionsService subservice
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime jsRuntime
@inject IMailService mailservice

@if (questionsList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach(var question in questionsList)
    {
        <div class="container @faded">
            <div class="card">
                <div class="card-body form-check">
                <h5 class="card-title">@question.Questions.QuestionName</h5>
                @if(@question.Questions.QuestionTypes.QuestionTypeName == "Radio")
                {
                    @foreach(var option in optionsList.Where(option => option.QuestionOrderNum == question.QuestionOrderNum))
                    {
                        <input class="form-check-input" type="radio" name="@option.Options.OptionName" value="@option.Options.OptionName" @onchange="@((eventArgs) => SaveRadioValue((string)eventArgs.Value, question.QuestionOrderNum, option.OptionOrderNum))"/>
                        <label for="@option.Options.OptionName">@option.Options.OptionName</label><br>
                    }
                }
                else if(@question.Questions.QuestionTypes.QuestionTypeName == "TextShort")
                {
                    <textarea placeholder="Skrifið hér..." rows="1" cols="60" @bind-value="@answers[question.QuestionOrderNum]" @bind-value:event="oninput"/> <br>
                }
                else if(@question.Questions.QuestionTypes.QuestionTypeName == "TextLong")
                {
                    <textarea placeholder="Skrifið hér..." rows="5" cols="100" @bind-value="@answers[question.QuestionOrderNum]" @bind-value:event="oninput"/> <br>
                }
                else if(@question.Questions.QuestionTypes.QuestionTypeName == "Multiple")
                {
                    @foreach(var option in optionsList.Where(option => option.QuestionOrderNum == question.QuestionOrderNum))
                    {
                        <input class="form-check-input" type="checkbox" name="@option.Options.OptionName" value="@option.Options.OptionName" @onchange="@((eventArgs) => SaveCheckboxValue((bool)eventArgs.Value, question.QuestionOrderNum, option.OptionOrderNum))"/>
                        <label for="@option.Options.OptionName"> @option.Options.OptionName</label><br>
                    }
                }
                else if(@question.Questions.QuestionTypes.QuestionTypeName == "Date")
                {
                    <DatePicker DateSelected="OnDateSelected"> </DatePicker>
                    SaveDateValue(SelectedDate, question.QuestionOrderNum);
                }
                else
                {
                    <h5>Something went wrong...</h5>
                }
                </div>
            </div>
        </div>
    }
    <button class="@faded" @onclick="SubmitForm">Senda inn tilkynningu</button>
}
@if(confirmation)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title"> Staðfesting</h5>
                    </div>
                    <div class="modal-body">
                        <p>Tilkynningin er skráð og verður komið til skila.</p>
                    </div>
                    <div class="modal-footer">
                        <a type="button" class="btn btn-primary" href="/">Aftur á upphafssíðu</a>
                    </div>
                </div>
            </div>
        </div>
    }
@code{
    [Parameter]
    public string id { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    System.Security.Claims.ClaimsPrincipal currentUser;
    List<QuestionsFormAssignments> questionsList;
    List<OptionsQuestionAssignmnents> optionsList;
    SubmissionsInfo submissionsInfo = new SubmissionsInfo();
    Submissions submission = new Submissions();
    string[] answers;
    int[] answersOrderNum;
    List<String> multipleAnswers = new List<String>();
    bool confirmation = false;
    string faded = "";

    protected override async Task OnInitializedAsync()
    {
        var FormId = Int16.Parse(id);
        questionsList = await questionservice.Get(FormId);
        optionsList = await optionservice.Get(FormId);
        answers = new string[questionsList.Count + 1];
        answersOrderNum = new int[questionsList.Count + 1];

        for(int i = 0; i < answers.Length; i++)
        {
            answers[i] = "";
            answersOrderNum[i] = 0;
        }
    }

    public DateTime SelectedDate { get; set; }

    public void OnDateSelected(DateTime dt)
    {
        SelectedDate = dt;
    }

    private void SaveDateValue(DateTime selectedDate, int questionOrderNum)
    {
        answers[questionOrderNum] = selectedDate.ToShortDateString();
    }

    private void SaveRadioValue(string chosenOption, int questionOrderNum, int optionOrderNum)
    {
        answers[questionOrderNum] = chosenOption;
        answersOrderNum[questionOrderNum] = optionOrderNum;
    }

    private void SaveCheckboxValue(bool chosenOption, int questionOrderNum, int optionOrderNum)
    {
        if(chosenOption)
        {
            foreach(var option in optionsList.Where(option => option.QuestionOrderNum == questionOrderNum
                    && option.OptionOrderNum == optionOrderNum))
            {
                multipleAnswers.Add(option.Options.OptionName);
            }
        }
        answersOrderNum[questionOrderNum] = optionOrderNum;
        string combine = "";
        foreach(var s in multipleAnswers)
        {
            combine += s + ", ";
        }
        answers[questionOrderNum] = combine;
    }

    private async void SubmitForm()
    {
        currentUser = (await authenticationStateTask).User;
        submissionsInfo.UserId = currentUser.Identity.Name.ToString();
        submissionsInfo = await subinfoservice.Add(submissionsInfo);
        // Henda út þessu userEmail þegar við erum búin að útfæra það að
        // admin setji inn email sem notification submit sendist á.
        var userEmail = currentUser.Identity.Name.ToString();

        foreach(var question in questionsList)
        {
            submission.SubmissionId = submissionsInfo.SubmissionId;
            submission.QuestionOrderNum = question.QuestionOrderNum;
            submission.Answer = answers[question.QuestionOrderNum];
            submission.AnswerOrderNum = answersOrderNum[question.QuestionOrderNum];
            submission.FormId = question.FormId;
            submission.QuestionsQuestionId = question.QuestionId;
            await subservice.Add(submission);
        }
        sendMail(userEmail);
        faded = "faded";
        confirmation = true;
        StateHasChanged();
    }
    private void sendMail(string userEmail)
    {
        var FormId = Int16.Parse(id);
        mailservice.mailBuilder(FormId, submission.SubmissionId, userEmail);
        faded = "faded";
        confirmation = true;
        StateHasChanged();
    }
}