@page "/Notification/{id}"
@attribute [Authorize]
@using BlazorSkraApp1.Data
@using BlazorSkraApp1.Services
@inject IQuestionsFormAssignmentService questionservice
@inject IOptionsQuestionAssignmnentsService optionservice
@inject ISubmissionsInfoService subinfoservice
@inject ISubmissionsService subservice
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime jsRuntime

@if (questionsList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach(var question in questionsList)
    {
        <div class="container">
            <div class="card">
                <div class="card-body form-check">
                <h5 class="card-title">@question.Questions.QuestionName</h5>
                @if(@question.Questions.QuestionTypes.QuestionTypeName == "Radio")
                {
                    int choiceIndex = 0;
                    @foreach(var option in optionsList.Where(option => option.QuestionOrderNum == question.QuestionOrderNum))
                    {
                        <input class="form-check-input" type="radio" name="@option.Options.OptionName" value="@option.Options.OptionName" @onchange="@((eventArgs) => OnChange((string)eventArgs.Value, question.QuestionOrderNum))"/>
                        <label for="@option.Options.OptionName">@option.Options.OptionName</label><br>
                        choiceIndex++;
                    }
                }
                else if(@question.Questions.QuestionTypes.QuestionTypeName == "TextShort")
                {
                    <textarea placeholder="Skrifið hér..." rows="1" cols="60" @bind-value="@answers[question.QuestionOrderNum]" @bind-value:event="oninput"/> <br>
                }
                else if(@question.Questions.QuestionTypes.QuestionTypeName == "TextLong")
                {
                    <textarea placeholder="Skrifið hér..." rows="5" cols="100" @bind-value="@answers[question.QuestionOrderNum]" @bind-value:event="oninput"/> <br>
                }
                else if(@question.Questions.QuestionTypes.QuestionTypeName == "Multiple")
                {
                    @foreach(var option in optionsList.Where(option => option.QuestionOrderNum == question.QuestionOrderNum))
                    {
                        <input class="form-check-input" type="checkbox" name="@option.Options.OptionName" value="@option.Options.OptionName">
                        <label for="@option.Options.OptionName"> @option.Options.OptionName</label><br>
                    }
                }
                else
                {
                    <h3>Something went wrong...</h3>
                }
                </div>
            </div>
        </div>
    }
    <button @onclick="SubmitForm">Senda</button>
}

@code{
    [Parameter]
    public string id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    System.Security.Claims.ClaimsPrincipal currentUser;

    List<QuestionsFormAssignments> questionsList;
    List<OptionsQuestionAssignmnents> optionsList;
    List<Options> options;
    SubmissionsInfo submissionsInfo = new SubmissionsInfo();
    Submissions submission = new Submissions();
    string[] answers;

    protected override async Task OnInitializedAsync()
    {
        var FormId = Int16.Parse(id);
        questionsList = await questionservice.Get(FormId);
        optionsList = await optionservice.Get(FormId);
        answers = new string[questionsList.Count + 1];

        for(int i = 0; i < answers.Length; i++)
        {
            answers[i] = "";
        }
    }

    private void OnChange(string chosenOption, int questionOrderNum)
    {
        answers[questionOrderNum] = chosenOption;
        /*foreach(var option in optionsList.Where(option => option.OptionOrderNum == chosenOption))
        {
            answers[questionOrderNum] = chosenOption.ToString();
            foreach(var o in options.Where(o => o.OptionId == options.OptionId))
            {
                answers[questionOrderNum] = o.OptionName;
            }
        }*/
    }

    private async void SubmitForm()
    {
        currentUser = (await authenticationStateTask).User;
        submissionsInfo.UserId = currentUser.Identity.Name.ToString();
        submissionsInfo = await subinfoservice.Add(submissionsInfo);

        foreach(var question in questionsList)
        {
            submission.SubmissionId = submissionsInfo.SubmissionId;
            submission.QuestionOrderNum = question.QuestionOrderNum;
            submission.AnswerOrderNum = question.QuestionOrderNum;      // option order num BREYTA
            submission.Answer = answers[question.QuestionOrderNum];
            submission.FormId = question.FormId;
            submission.QuestionsQuestionId = question.QuestionId;
            await subservice.Add(submission);
        }
    }
}