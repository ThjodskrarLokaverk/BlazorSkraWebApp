@page "/FormCreation"
@page "/FormCreation/{selectedCategoryId}"
@using BlazorSkraApp1.Data
@using BlazorSkraApp1.Services
@using BlazorSkraApp1.Models.InputModels
@using BlazorSkraApp1.Models.ViewModels
@using BlazorSkraApp1.Shared.Components
@using BlazorSkraApp1.Components
@inject NavigationManager NavigationManager
@inject ICategoriesService categoriesService
@inject IQuestionTypesService questionTypesService
@inject IFormsInfoService formsInfoService
@inject ICategoriesAssignmentsService formsCategoryAssignmentsService
@inject IOptionsQuestionAssignmnentsService optionsQuestionAssignmentsService
@inject IQuestionsFormAssignmentService questionsFormAssignmentsService
@inject IQuestionsService questionsService
@inject IOptionsService optionsService

<AuthorizeView Roles="Admin" Context="AuthContext">
    @if (!formCreated)
    {
        <!-- Create form -->
        <FormEditComponent OnEdit="CreateFormHandler" selectedCategoryId="@selectedCategoryId" formParameter="createdForm">
            <CustomButtonText>Forskoða eyðublað</CustomButtonText>
        </FormEditComponent>
    }

    @if (formCreated && !formPublished)
    {
        <!-- Display the created Form -->
        <FormViewComponent Form="@createdForm"></FormViewComponent>
        @if (IsClicked)
        {
            <button type="button" class="btn approve-btn" disabled>
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                Í vinnslu...
            </button>
        }
        else
        {
            <button @onclick="SaveForm" type="button" class="btn approve-btn">Birta eyðublað</button>
        }
        <button @onclick="EditForm" type="button" class="btn approve-btn">Breyta eyðublaði</button>
        <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#confirmationModal">Eyða eyðublaði</button>

        <!-- Delete created form popup -->
        <ConfirmationModalComponent OnClick="DeleteFormHandler">
            <CustomHeader>Eyða eyðublaði?</CustomHeader>
            <CustomBody>Það verður ekki hægt að endurheimta það</CustomBody>
            <CustomButtonText>Eyða</CustomButtonText>
            <CustomCloseButtonText>Hætta við</CustomCloseButtonText> 
        </ConfirmationModalComponent>
    }

    @if (formPublished)
    {
        <div class="d-flex justify-content-center">
            <h2>Eyðublað hefur verið birt</h2>
        </div>
        <br />
        <a class="btn approve-btn btn-lg d-flex justify-content-center" href="/" role="button">Fara á forsíðu</a>
    }
</AuthorizeView>

@code {
    [Parameter]
    public string selectedCategoryId { get; set; }
    protected FormsViewModel createdForm;
    bool formCreated = false;
    bool formPublished = false;
    private bool IsClicked;

    private void EditForm()
    {
        formCreated = false;
    }

    protected void DeleteFormHandler()
    {
        NavigationManager.NavigateTo("/", true);
    }

    private async void CreateFormHandler(FormsInputModel formInputModel)
    {
        createdForm = new FormsViewModel();
        createdForm.Questions = new List<QuestionsViewModel>();

        //Vista formInfo
        createdForm.CategoryId = Int16.Parse(formInputModel.CategoryId);
        var category = await categoriesService.Get(createdForm.CategoryId);
        createdForm.CategoryName = category.CategoryName;
        createdForm.FormName = formInputModel.FormName;
        createdForm.DestinationEmail = formInputModel.DestinationEmail;
        createdForm.IsAnonymous = formInputModel.IsAnonymous;

        //Vista questions
        foreach (var question in formInputModel.Questions)
        {
            var createdQuestion = new QuestionsViewModel();
            createdQuestion.Options = new List<OptionsViewModel>();
            createdQuestion.QuestionName = question.QuestionName;
            createdQuestion.QuestionTypeId = Int16.Parse(question.QuestionTypeId);
            createdQuestion.QuestionOrderNum = createdForm.Questions.Count();
            createdQuestion.QuestionTypeOrderNum = createdForm.Questions.Count(o => o.QuestionTypeId == createdQuestion.QuestionTypeId);
            //Vista options fyrir hverja question
            foreach (var option in question.Options)
            {
                var createdOption = new OptionsViewModel();
                createdOption.OptionName = option.OptionName;
                createdOption.OptionOrderNum = createdQuestion.Options.Count();
                createdQuestion.Options.Add(createdOption);
            }
            createdForm.Questions.Add(createdQuestion);
        }

        formCreated = true;
    }

    //Save form to Db
    private async void SaveForm()
    {
        //Disable save button
        IsClicked = true;
        StateHasChanged();

        //Add formInfo to Db
        FormsInfo formInfo = new FormsInfo();
        formInfo.FormName = createdForm.FormName;
        formInfo.DestinationEmail = createdForm.DestinationEmail;
        formInfo.IsAnonymous = createdForm.IsAnonymous;
        formInfo = await formsInfoService.Add(formInfo);

        //Add FormsCategoryAssignments (CategoriesAssignments) to Db
        CategoriesAssignments formsCategoryAssignment = new CategoriesAssignments();
        formsCategoryAssignment.FormId = formInfo.FormId;
        formsCategoryAssignment.CategoryId = createdForm.CategoryId;
        formsCategoryAssignment = await formsCategoryAssignmentsService.Add(formsCategoryAssignment);

        //Add questions to Db
        List<Questions> questionsList = new List<Questions>();
        foreach (var createdQuestion in createdForm.Questions)
        {
            Questions question = new Questions();
            question.QuestionTypes = new QuestionTypes();
            question.QuestionTypes = await questionTypesService.Get(createdQuestion.QuestionTypeId);
            question.QuestionName = createdQuestion.QuestionName;
            question = await questionsService.Add(question);

            QuestionsFormAssignments questionFormAssignment = new QuestionsFormAssignments();
            questionFormAssignment.FormId = formInfo.FormId;
            questionFormAssignment.QuestionId = question.QuestionId;
            questionFormAssignment.QuestionOrderNum = createdQuestion.QuestionOrderNum;
            questionFormAssignment.QuestionTypeOrderNum = createdQuestion.QuestionTypeOrderNum;
            questionFormAssignment = await questionsFormAssignmentsService.Add(questionFormAssignment);

            //Add the questions options to the Db
            foreach (var createdOption in createdQuestion.Options)
            {
                Options option = new Options();
                option.OptionName = createdOption.OptionName;
                option = await optionsService.Add(option);

                OptionsQuestionAssignmnents optionQuestionAssignment = new OptionsQuestionAssignmnents();
                optionQuestionAssignment.FormId = formInfo.FormId;
                optionQuestionAssignment.QuestionOrderNum = createdQuestion.QuestionOrderNum;
                optionQuestionAssignment.OptionId = option.OptionId;
                optionQuestionAssignment.OptionOrderNum = createdOption.OptionOrderNum;
                optionQuestionAssignment = await optionsQuestionAssignmentsService.Add(optionQuestionAssignment);
            }
        }

        formPublished = true;
        IsClicked = false;
        StateHasChanged();
    }
}