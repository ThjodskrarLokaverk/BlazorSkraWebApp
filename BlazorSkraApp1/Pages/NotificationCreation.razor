@page "/CreateNotification"
@using BlazorSkraApp1.Data
@using BlazorSkraApp1.Services
@inject IOptionsQuestionAssignmnentsService oqaservice
@inject IQuestionsFormAssignmentService qfaservice
@inject IQuestionsService qservice
@inject IOptionsService opservice
@inject ICategoriesService catservice
@inject IFormsInfoService fiservice
@inject IQuestionTypesService qtservice
@inject ICategoriesAssignmentsService qasservice
@inject IJSRuntime jsRuntime

<EditForm Model="@currentCategory" OnValidSubmit="AddFirst">
    @*<ObjectGraphDataAnnotationsValidator />
    <ValidationSummary />*@

    <h1>Ný tegund tilkynningar</h1>
    <div class="form-group row">
        <label for="categories" class="col-sm-2 col-form-label">Flokkur</label>
        <div class="col-sm-10">
            <InputSelect @bind-Value="_SelectedCategoryId" id="categories" class="form-control">
                <option value="">Veldu flokk</option>
                @if (categoriesList == null)
                {
                    <option>loading...</option>
                }
                else
                {
                    foreach (var category in categoriesList)
                    {
                        <option value="@System.Convert.ToString(category.CategoryId)">@category.CategoryName</option>
                    }
                }
            </InputSelect>
        </div>
    </div>
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">Heiti tilkynningar</label>
        <div class="col-sm-10">
            <InputText id="name" class="form-control" @bind-Value="@currentForm.FormName" />
        </div>
    </div>
    <hr>
    <br>
    @if (questionsList == null){}
    else
    {
        <h4>Tilkynningin þín:</h4>
        <p>Vinsamlegast ekki yfirgefa þessa síðu fyrr en þú hefur klárað að fylla út tilkynninguna</p>
        @foreach(var question in questionsList)
        {
            <div class="card">
                <div class="card-body">
                <div>
                    <h5 class="card-title">@question.Questions.QuestionName</h5>
                    <button class="btn btn-link edit-icon" @onclick="(() => ShowEditPopup(question))" data-toggle="modal" data-target="#confirmDeleteModal" value="Delete" >
                        <i class="fas fa-pen" title="Modifier"></i>
                    </button>
                </div>
                @if(@question.Questions.QuestionTypes.QuestionTypeName == "Radio")
                {
                    @foreach(var option in optionsList.Where(option => option.QuestionOrderNum == question.QuestionOrderNum))
                    {
                        <input type="radio" name="@option.Options.OptionName" value="@option.Options.OptionName">
                        <label for="@option.Options.OptionName"> @option.Options.OptionName</label><br>
                    }
                }
                else if(@question.Questions.QuestionTypes.QuestionTypeName == "TextShort")
                {
                        <textarea placeholder="Skrifið hér..." rows="1" cols="60"/> <br>
                }
                else if(@question.Questions.QuestionTypes.QuestionTypeName == "TextLong")
                {
                        <textarea placeholder="Skrifið hér..." rows="5" cols="100"/> <br>
                }
                else if(@question.Questions.QuestionTypes.QuestionTypeName == "Multiple")
                {
                    @foreach(var option in optionsList.Where(option => option.QuestionOrderNum == question.QuestionOrderNum))
                    {
                        <input type="checkbox" name="@option.Options.OptionName" value="@option.Options.OptionName">
                        <label for="@option.Options.OptionName"> @option.Options.OptionName</label><br>
                    }
                }
                else
                {
                    <h3>Something went wrong...</h3>
                }
                </div>
            </div>
        }
            <br>
            <hr>
            <br>
    }
    @if (!(questionsList == null))
    {
        <h4>Bæta við spurningu:</h4>
    }
    <div class="form-group row form-inline" id="question-box">
        <InputText placeholder="Titill spurningar" type="text" class="form-control" id="question-name" @bind-Value="@currentQuestion.QuestionName" />
        <InputSelect @bind-Value="_SelectedQuestionTypeId" id="question-type" class="form-control">
            <option value="">Veldu tegund</option>
            @if (questionTypesList == null)
            {
                <option>loading...</option>
            }
            else
            {
                foreach (var type in questionTypesList)
                {
                    <option value="@System.Convert.ToString(type.QuestionTypeId)">@type.QuestionTypeName</option>
                }
            }
        </InputSelect>
        <button type="submit">
            <i class="fas fa-save question-icons"></i>
        </button>
    </div>
    @if (_SelectedQuestionTypeId == "2" || _SelectedQuestionTypeId == "5")
    {
        <div class="form-group row form-inline" id="question-box">
            <label for="OptionName">Valkostur 1</label>
            <InputText placeholder="Valkostur 1" id="name" class="form-control" @bind-Value="@currentOption1.OptionName" />
        </div>
        <div class="form-group row form-inline" id="question-box">
            <label for="OptionName">Valkostur 2</label>
            <InputText placeholder="Valkostur 1" id="name" class="form-control" @bind-Value="@currentOption2.OptionName" />
        </div>
        if (optionCount == 3)
        {
            <div class="form-group row form-inline" id="question-box">
                <label for="OptionName">Valkostur 3</label>
                <InputText placeholder="Valkostur 1" id="name" class="form-control" @bind-Value="@currentOption3.OptionName" />
                <a>
                    <i class="fas fa-trash-alt question-icons"></i>
                </a>
            </div>
        }
        if (optionCount == 4)
        {
            <div class="form-group row form-inline" id="question-box">
                <label for="OptionName">Valkostur 3</label>
                <InputText placeholder="Valkostur 1" id="name" class="form-control" @bind-Value="@currentOption3.OptionName" />
                <a>
                    <i class="fas fa-trash-alt question-icons"></i>
                </a>
            </div>
            <div class="form-group row form-inline" id="question-box">
                <label for="OptionName">Valkostur 4</label>
                <InputText placeholder="Valkostur 1" id="name" class="form-control" @bind-Value="@currentOption4.OptionName" />
                <a>
                    <i class="fas fa-trash-alt question-icons"></i>
                </a>
            </div>
        }
        if (!(optionCount == 4))
        {
            <div class="form-group row">
                <div class="col-sm-10">
                    <span id="plus-icon" class="oi oi-plus"></span>
                    <a id="add-question-link" @onclick="CreateNewOption">Bæta við valkost</a>
                </div>
            </div>
        }
    }
</EditForm> 


@if(showEdit)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog" >
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Uppfæra / Eyða</h4>
                    <button type="button" class="close" data-dismiss="modal" @onclick="Cancel">&times; </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@deleteQuestion" OnValidSubmit="@UpdateQuestion">
                        <div class="form-group">
                            <label for="deleteQuestionName">Nafn spurningar</label>
                            <InputText id="name" class="form-control" @bind-Value="@deleteQuestion.QuestionName" />
                        </div>
                        <div class="form-group">
                            @foreach(var option in optionsList.Where(option => option.QuestionOrderNum == deleteQuestionDown.QuestionOrderNum))
                            {
                                <label for="deleteOptionName">Nafn valkosts</label>
                                <InputText id="name" class="form-control" @bind-Value="@option.Options.OptionName" />
                            }
                        </div>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn approve-btn" @onclick="(() => UpdateQuestion())" >Uppfæra</button>
                    <button type="button" class="btn btn-danger" @onclick="(() => ShowDeletePopup(deleteQuestion))" >Eyða</button>
                    <button type="button" class="btn cancel-btn" @onclick="Cancel" data-dismiss="modal">Hætta við</button>
                </div>
            </div>
        </div>
    </div>
}

@if(showDelete)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"> Staðfesting</h5>
                    <button type="button" class="close" data-dismiss="modal" @onclick="Cancel">&times;</button>
                </div>
                <div class="modal-body">
                    <p>Ertu viss um að þú viljir eyða flokknum @deleteQuestion.QuestionName? </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" @onclick="(() => Delete(deleteQuestion))">Eyða</button>
                    <button type="button" class="btn cancel-btn" @onclick="Cancel" data-dismiss="modal">Hætta við</button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    //Listar sem eru fyrir options í select
    List<Categories> categoriesList;
    List<QuestionTypes> questionTypesList;

    //Breytur úr listum til þess að hægt sé að edita/deletea
    QuestionsFormAssignments deleteQuestionDown = new QuestionsFormAssignments();
    Questions deleteQuestion = new Questions();

    //Breytur sem eru notaðar vegna þess að inputselect styður ekki Int32
    string _SelectedCategoryId;
    string _SelectedQuestionTypeId;

    //Breytur sem þarf að senda inn í gagnagrunn
    FormsInfo currentForm = new FormsInfo();
    Categories currentCategory = new Categories();
    Questions currentQuestion = new Questions();
    Options currentOption1 = new Options();
    Options currentOption2 = new Options();
    Options currentOption3 = new Options();
    Options currentOption4 = new Options();

    //Breytur til þess að birta spurningar sem hafa verið sendar inn
    List<QuestionsFormAssignments> questionsList;
    List<OptionsQuestionAssignmnents> optionsList;
    
    //Breytur sem halda utan um fjölda spurninga
    private int questionCount = 0;
    private int optionCount = 2;

    //Breytur til þess að birta edit/delete
    bool showDelete = false;
    bool showEdit = false;
    bool firstDeleted = false;

    protected override async Task OnInitializedAsync()
    {
        //Fylla lista af categories og spurningartýpum sem eru í boði
        categoriesList = await catservice.Get();
        questionTypesList = await qtservice.Get();
    }

    private void CreateNewOption()
    {
        optionCount++;
    }

    private void DeleteOption()
    {
        optionCount--;
    }

    private async void ShowEditPopup(QuestionsFormAssignments question)
    {
        deleteQuestionDown = question;

        deleteQuestion = await qservice.GetQuestion(deleteQuestionDown.Questions.QuestionId);
        showEdit = true;
    }

    void ShowDeletePopup(Questions question)
    {
        showEdit = false;
        showDelete = true;
    }

    void Cancel()
    {
        showDelete = false;
        showEdit = false;
    }

    protected async void UpdateQuestion()
    {
        Options editOption = new Options();

        await qservice.Update(deleteQuestion);

        foreach(var option in optionsList)
        {
            editOption = await opservice.Get(option.OptionId);
            await opservice.Update(editOption);
        }

        showEdit = false;
        StateHasChanged();
    }

    private async Task Delete(Questions deleteQuestion)
    {
        //Setja fyrirvara um hversu vel við viljum gera þetta. Gæti tekið mjög lengann tíma að framkvæma aðgerðina
        //Spurning hvort við viljum bara aftengja eina töflu og láta draslið sitja í hinum
        Options deleteOption = new Options();
        int realQuestionCount = deleteQuestionDown.QuestionOrderNum;
        await qservice.Delete(deleteQuestion);

        List<OptionsQuestionAssignmnents> deleteOptionsDown = await oqaservice.Get(deleteQuestionDown.FormId);

        foreach(var option in deleteOptionsDown.Where( option => option.QuestionOrderNum == deleteQuestionDown.QuestionOrderNum))
        {
            deleteOption = await opservice.Get(option.OptionId);
            await opservice.Delete(deleteOption);
            await oqaservice.Delete(option);
        }

        questionsList = await qfaservice.Get(currentForm.FormId);
        optionsList = await oqaservice.Get(currentForm.FormId);

        QuestionsFormAssignments updatedQuestionsFormsAssignments = new QuestionsFormAssignments();
        OptionsQuestionAssignmnents updatedOptionsQuestionAssignments = new OptionsQuestionAssignmnents();

        foreach(var question in questionsList.Where(question => question.QuestionOrderNum >= realQuestionCount))
        {
            if(question.QuestionOrderNum == realQuestionCount)
            {
                await qfaservice.Delete(question);
            }
            else
            {
                updatedQuestionsFormsAssignments.FormId = question.FormId;
                updatedQuestionsFormsAssignments.QuestionId = question.QuestionId;
                updatedQuestionsFormsAssignments.QuestionOrderNum = question.QuestionOrderNum - 1;
                await qfaservice.Delete(question);
                await qfaservice.Add(updatedQuestionsFormsAssignments);

                foreach(var option in optionsList.Where(option => option.QuestionOrderNum == question.QuestionOrderNum))
                {
                    updatedOptionsQuestionAssignments.OptionOrderNum = option.OptionOrderNum;
                    updatedOptionsQuestionAssignments.FormId = option.FormId;
                    updatedOptionsQuestionAssignments.OptionId = option.OptionId;
                    updatedOptionsQuestionAssignments.QuestionOrderNum = updatedOptionsQuestionAssignments.QuestionOrderNum;
                    await oqaservice.Delete(option);
                    await oqaservice.Add(updatedOptionsQuestionAssignments);
                }
            }
        }

        if(realQuestionCount == 2)
        {
            questionCount--;
            firstDeleted = true;
        }
        else if(realQuestionCount == 1)
        {
            firstDeleted = true;
        }
        else
        {
            questionCount--;
        }
        
        showDelete = false;
        StateHasChanged();
    }

    private async void AddFirst()
    {
        if(questionCount == 0 && firstDeleted == false)
        {
        //Nýju formi bætt við
        currentForm = await fiservice.Add(currentForm);
        questionCount++;

        //Búið til eintak af CategoriesAssignments og Category og Form tengt saman.
        CategoriesAssignments _CategoriesAssignments = new CategoriesAssignments();
        _CategoriesAssignments.CategoryId = Int32.Parse(_SelectedCategoryId);
        _CategoriesAssignments.FormId = currentForm.FormId;
        await qasservice.Add(_CategoriesAssignments);
        }
        else
        {
            questionCount++;
        }

        //Það QuestionType sem var valið sótt og bætt við í currentQuestion. Henni síðan bætt við sem spurningu
        QuestionTypes _QuestionTypes = new QuestionTypes();
        _QuestionTypes = await qtservice.Get(Int32.Parse(_SelectedQuestionTypeId));
        currentQuestion.QuestionTypes = _QuestionTypes;
        currentQuestion = await qservice.Add(currentQuestion);

        //Búið til eintak af QuestionsFormAssignments. CurrentQuestion tengd við form og sagt til um númer hvað spurningin er
        QuestionsFormAssignments qfa = new QuestionsFormAssignments();
        qfa.FormId = currentForm.FormId;
        qfa.QuestionId = currentQuestion.QuestionId;
        qfa.QuestionOrderNum = questionCount;
        await qfaservice.Add(qfa);

        //Ef spurningin er með RadioButton eða Checkbox
        if(currentQuestion.QuestionTypes.QuestionTypeId == 2 || currentQuestion.QuestionTypes.QuestionTypeId == 5)
        {
            //Fyrsta option bætt við í option töfluna og síðan búið til eintak af OptionsQuestionAssignments og option-inn tengdur við spurningu  
            currentOption1 = await opservice.Add(currentOption1);

            OptionsQuestionAssignmnents FirstOQA = new OptionsQuestionAssignmnents();
            FirstOQA.OptionId = currentOption1.OptionId;
            FirstOQA.FormId = currentForm.FormId;
            FirstOQA.OptionOrderNum = 1;
            FirstOQA.QuestionOrderNum = questionCount;
            FirstOQA = await oqaservice.Add(FirstOQA);
            
            //Sama og fyrir ofan, nema fyrir option númer 2
            currentOption2 = await opservice.Add(currentOption2);

            OptionsQuestionAssignmnents SecondOQA = new OptionsQuestionAssignmnents();
            SecondOQA.OptionId = currentOption2.OptionId;
            SecondOQA.FormId = currentForm.FormId;
            SecondOQA.OptionOrderNum = 2;
            SecondOQA.QuestionOrderNum = questionCount;
            SecondOQA = await oqaservice.Add(SecondOQA);

            if(!(currentOption3.OptionName == null))
            {
                //Sama og fyrir ofan, nema fyrir option 3
                currentOption3 = await opservice.Add(currentOption3);

                OptionsQuestionAssignmnents ThirdOQA = new OptionsQuestionAssignmnents();
                ThirdOQA.OptionId = currentOption3.OptionId;
                ThirdOQA.FormId = currentForm.FormId;
                ThirdOQA.OptionOrderNum = 3;
                ThirdOQA.QuestionOrderNum = questionCount;
                ThirdOQA = await oqaservice.Add(ThirdOQA);
            }

            if(!(currentOption4.OptionName == null))
            {
                //Sama og fyrir ofan, nema fyrir option 4
                currentOption4 = await opservice.Add(currentOption4);

                OptionsQuestionAssignmnents FourthOQA = new OptionsQuestionAssignmnents();
                FourthOQA.OptionId = currentOption4.OptionId;
                FourthOQA.FormId = currentForm.FormId;
                FourthOQA.OptionOrderNum = 4;
                FourthOQA.QuestionOrderNum = questionCount;
                FourthOQA = await oqaservice.Add(FourthOQA);
            }
        }
        //Ef þetta er spurning með textainput
        else
        {
        }

        ClearAll();
    }

    private async void ClearAll()
    {
        //Birta þær spurningar sem hafa verið sendar inn
        questionsList = await qfaservice.Get(currentForm.FormId);
        optionsList = await oqaservice.Get(currentForm.FormId);
        
        _SelectedQuestionTypeId = "";
        Questions replaceQuestion = new Questions();
        currentQuestion = replaceQuestion;

        Options replaceOption1 = new Options();
        currentOption1 = replaceOption1;

        Options replaceOption2 = new Options();
        currentOption2 = replaceOption2;

        Options replaceOption3 = new Options();
        currentOption3 = replaceOption3;

        Options replaceOption4 = new Options();
        currentOption4 = replaceOption4;

        optionCount = 2;

        StateHasChanged();
    }
}