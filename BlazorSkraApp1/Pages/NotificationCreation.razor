@page "/CreateNotification"
@using BlazorSkraApp1.Data
@using BlazorSkraApp1.Services
@using BlazorSkraApp1.Models.InputModels
@using BlazorSkraApp1.Shared.Components
@inject IOptionsQuestionAssignmnentsService oqaservice
@inject IQuestionsFormAssignmentService qfaservice
@inject IQuestionsService qservice
@inject IOptionsService opservice
@inject ICategoriesService catservice
@inject IFormsInfoService fiservice
@inject IQuestionTypesService qtservice
@inject ICategoriesAssignmentsService qasservice
@inject IJSRuntime jsRuntime

<div class="container">
    <EditForm Model="@Notification" OnValidSubmit="AddFirst">
        <h3>Ný tegund tilkynningar</h3>
        <div class="form-group row">
            <label for="categories" class="col-sm-2 col-form-label">Flokkur</label>
            <div class="col-sm-10">
                <InputSelect @bind-Value="@Notification.CategoryId" id="categories" class="form-control">
                    <option value="">Veldu flokk</option>
                    @if (categoriesList == null)
                    {
                        <option>loading...</option>
                    }
                    else
                    {
                        foreach (var category in categoriesList)
                        {
                            <option value="@System.Convert.ToString(category.CategoryId)">@category.CategoryName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Notification.CategoryId)" />
            </div>
        </div>
        <div class="form-group row">
            <label class="col-sm-2 col-form-label">Heiti tilkynningar</label>
            <div class="col-sm-10">
                <InputText id="name" class="form-control" @bind-Value="@Notification.NewFormName" />
                <ValidationMessage For="@(() => Notification.NewFormName)" />
            </div>
        </div>
        <div class="form-group row">
          <label class="col-sm-2 col-form-label">Tölvupóstfang</label>
          <div class="col-sm-10">
              <InputText id="email" class="form-control" @bind-Value="@Notification.DestinationEmail" />
              <ValidationMessage For="@(() => Notification.DestinationEmail)" />
          </div>
        </div>
        @if (questionsList == null)
        { }
        else
        {
            <p>Vinsamlegast ekki yfirgefa þessa síðu fyrr en þú hefur klárað að fylla út tilkynninguna</p>
            <div class="question-wrapper">
                @foreach (var question in questionsList)
                {
                    <div class="card">
                        @if(question != questionsList.First())
                        {
                            <hr>
                        }
                        <div class="card-body">
                            <div>
                                <div id="title-edit">
                                    <h5 id="question-title" class="card-title">@question.Questions.QuestionName</h5>
                                    <a class="btn btn-link" id="i-pen" @onclick="(() => ShowEditPopup(question))" data-toggle="modal" data-target="#confirmDeleteModal" value="Delete">
                                        <i class="fas fa-pen" title="Modifier"></i>
                                    </a>
                                </div>
                            </div>
                            @if (@question.Questions.QuestionTypes.QuestionTypeId == 2)
                            {
                                <fieldset id="radio-group">
                                    @foreach (var option in optionsList.Where(option => option.QuestionOrderNum == question.QuestionOrderNum))
                                    {
                                        <input type="radio" name="radio-group" value="@option.Options.OptionName">
                                        <label for="@option.Options.OptionName"> @option.Options.OptionName</label><br>
                                    }
                                </fieldset>
                            }
                            else if (@question.Questions.QuestionTypes.QuestionTypeId == 4)
                            {
                                <textarea placeholder="Skrifið hér..." rows="1" class="form-control textbox" />
                            }
                            else if (@question.Questions.QuestionTypes.QuestionTypeId == 3)
                            {
                                <textarea placeholder="Skrifið hér..." rows="5" class="form-control textbox" />
                            }
                            else if (@question.Questions.QuestionTypes.QuestionTypeId == 5)
                            {
                                @foreach (var option in optionsList.Where(option => option.QuestionOrderNum == question.QuestionOrderNum))
                                {
                                    <input type="checkbox" class="form-control" name="@option.Options.OptionName" value="@option.Options.OptionName" />
                                    <label for="@option.Options.OptionName"> @option.Options.OptionName</label>
                                }
                            }
                            else if(@question.Questions.QuestionTypes.QuestionTypeId == 6)
                            {
                                <DatePicker DateSelected="OnDateSelected"> </DatePicker>
                            }
                            else
                            {
                                <h5>Something went wrong...</h5>
                            }
                        </div>
                    </div>
                }
            </div>
        }
        <hr>
        <br>
        @if (!(questionsList == null))
        {
            <h4>Bæta við spurningu:</h4>
        }
        <div class="question-wrapper">
            <div class="card">
                <div class="card-body" id="question-box">
                    <div class="form-group row form-inline">
                        <InputText placeholder="Titill spurningar" type="text" id="question-name" class="form-control" @bind-Value="@Notification.QuestionName" />
                        <InputSelect @bind-Value="@Notification.QuestionTypeId" id="question-type" class="form-control">
                            <option value="">Veldu tegund</option>
                            @if (questionTypesList == null)
                            {
                                <option>loading...</option>
                            }
                            else
                            {
                                foreach (var type in questionTypesList)
                                {
                                    <option value="@System.Convert.ToString(type.QuestionTypeId)">@type.QuestionTypeName</option>
                                }
                            }
                        </InputSelect>
                        <button type="submit" id="save-icon" class="btn btn-link">
                            <i class="fas fa-save"></i>
                        </button>
                        <ValidationMessage id="question-name-validation" For="@(() => Notification.QuestionName)" />
                        <ValidationMessage id="question-type-validation" For="@(() => Notification.QuestionTypeId)" />
                    </div>
                </div>
                @if (Notification.QuestionTypeId == "2" || Notification.QuestionTypeId == "5")
                {
                    <div class="option-wrapper">
                        <div class="form-group row">
                            <label for="optionName" class="col-form-label">Valkostur 1</label>
                            <div class="col-sm-4">
                                <InputText id="optionName" class="form-control" placeholder="Valkostur 1" @bind-Value="@currentOption1.OptionName" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="optionName" class="col-form-label">Valkostur 2</label>
                            <div class="col-sm-4">
                                <InputText id="optionName" class="form-control" placeholder="Valkostur 2" @bind-Value="@currentOption2.OptionName" />
                            </div>
                        </div>
                        @if (optionCount == 3)
                        {
                            <div class="form-group row">
                                <label for="optionName" class="col-form-label">Valkostur 3</label>
                                <div class="col-sm-4">
                                    <InputText id="optionName" class="form-control" placeholder="Valkostur 3" @bind-Value="@currentOption3.OptionName" />
                                </div>
                                <a class="btn btn-link" data-toggle="modal" @onclick="(() => DeleteOption(currentOption3))">
                                    <i id="trash-icon" class="fas fa-trash-alt" title="Modifier"></i>
                                </a>
                            </div>
                        }
                        @if (optionCount == 4)
                        {
                            <div class="form-group row">
                                <label for="optionName" class="col-form-label">Valkostur 3</label>
                                <div class="col-sm-4">
                                    <InputText id="optionName" class="form-control" placeholder="Valkostur 3" @bind-Value="@currentOption3.OptionName" />
                                </div>
                                <a class="btn btn-link" data-toggle="modal" @onclick="(() => DeleteOption(currentOption3))">
                                    <i id="trash-icon" class="fas fa-trash-alt" title="Modifier"></i>
                                </a>
                            </div>
                            <div class="form-group row">
                                <label for="optionName" class="col-form-label">Valkostur 4</label>
                                <div class="col-sm-4">
                                    <InputText id="optionName" class="form-control" placeholder="Valkostur 4" @bind-Value="@currentOption4.OptionName" />
                                </div>
                                <a class="btn btn-link" data-toggle="modal" @onclick="(() => DeleteOption(currentOption4))">
                                    <i id="trash-icon" class="fas fa-trash-alt" title="Modifier"></i>
                                </a>
                            </div>
                        }
                        @if (!(optionCount == 4))
                        {
                            <div class="form-group row">
                                <div class="col-sm-10">
                                    <span id="plus-icon" class="oi oi-plus"></span>
                                    <a id="add-question-link" @onclick="CreateNewOption">Bæta við valkost</a>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
        <br>
        <button class="btn approve-btn">Vista tegund tilkynningar</button>
        <button class="btn btn-danger">Eyða tegund tilkynningar</button>
        <br><br>
        <DataAnnotationsValidator />
    </EditForm>


    @if (showEdit)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Uppfæra / Eyða</h4>
                        <button type="button" class="close" data-dismiss="modal" @onclick="Cancel">&times;</button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@deleteQuestion" OnValidSubmit="@UpdateQuestion">
                            <div class="form-group">
                                <label for="deleteQuestionName">Nafn spurningar</label>
                                <InputText id="name" class="form-control" @bind-Value="@deleteQuestion.QuestionName" />
                            </div>
                            <div class="form-group">
                                @foreach (var option in optionsList.Where(option => option.QuestionOrderNum == deleteQuestionDown.QuestionOrderNum))
                                {
                                    <label for="deleteOptionName">Nafn valkosts</label>
                                    <InputText id="name" class="form-control" @bind-Value="@option.Options.OptionName" />
                                }
                            </div>
                        </EditForm>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn approve-btn" @onclick="(() => UpdateQuestion())">Uppfæra</button>
                        <button type="button" class="btn btn-danger" @onclick="(() => ShowDeletePopup(deleteQuestion))">Eyða</button>
                        <button type="button" class="btn cancel-btn" @onclick="Cancel" data-dismiss="modal">Hætta við</button>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (showDelete)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title"> Staðfesting</h5>
                        <button type="button" class="close" data-dismiss="modal" @onclick="Cancel">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>Ertu viss um að þú viljir eyða flokknum @deleteQuestion.QuestionName? </p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" @onclick="(() => Delete(deleteQuestion))">Eyða</button>
                        <button type="button" class="btn cancel-btn" @onclick="Cancel" data-dismiss="modal">Hætta við</button>
                    </div>
                </div>
            </div>
        </div>
    }

    @code {

        //Tilraun
        NotificationInputModel Notification = new NotificationInputModel();

        //Listar sem eru fyrir options í select
        List<Categories> categoriesList;
        List<QuestionTypes> questionTypesList;

        //Breytur úr listum til þess að hægt sé að edita/deletea
        QuestionsFormAssignments deleteQuestionDown = new QuestionsFormAssignments();
        Questions deleteQuestion = new Questions();

        //Breytur sem þarf að senda inn í gagnagrunn
        FormsInfo currentForm = new FormsInfo();
        Categories currentCategory = new Categories();
        Options currentOption1 = new Options();
        Options currentOption2 = new Options();
        Options currentOption3 = new Options();
        Options currentOption4 = new Options();

        //Breytur til þess að birta spurningar sem hafa verið sendar inn
        List<QuestionsFormAssignments> questionsList;
        List<OptionsQuestionAssignmnents> optionsList;

        //Breytur sem halda utan um fjölda spurninga
        private int questionCount = 0;
        private int optionCount = 2;

        //Breytur til þess að birta edit/delete
        bool showDelete = false;
        bool showEdit = false;
        bool firstDeleted = false;

        protected override async Task OnInitializedAsync()
        {
            //Fylla lista af categories og spurningartýpum sem eru í boði
            categoriesList = await catservice.Get();
            questionTypesList = await qtservice.Get();
        }

        private void CreateNewOption()
        {
            optionCount++;
        }

        private void DeleteOption(Options option)
        {
            option.OptionName = "";
            optionCount--;
        }

        private async void ShowEditPopup(QuestionsFormAssignments question)
        {
            deleteQuestionDown = question;

            deleteQuestion = await qservice.GetQuestion(deleteQuestionDown.Questions.QuestionId);
            showEdit = true;
        }

        void ShowDeletePopup(Questions question)
        {
            showEdit = false;
            showDelete = true;
        }

        void Cancel()
        {
            showDelete = false;
            showEdit = false;
        }

        protected async void UpdateQuestion()
        {
            Options editOption = new Options();

            await qservice.Update(deleteQuestion);

            foreach (var option in optionsList)
            {
                editOption = await opservice.Get(option.OptionId);
                await opservice.Update(editOption);
            }

            showEdit = false;
            StateHasChanged();
        }

        private async Task Delete(Questions deleteQuestion)
        {
            //Setja fyrirvara um hversu vel við viljum gera þetta. Gæti tekið mjög lengann tíma að framkvæma aðgerðina
            //Spurning hvort við viljum bara aftengja eina töflu og láta draslið sitja í hinum
            Options deleteOption = new Options();
            int deleteQuestionCount = deleteQuestionDown.QuestionOrderNum;
            await qservice.Delete(deleteQuestion);

            List<OptionsQuestionAssignmnents> deleteOptionsDown = await oqaservice.Get(deleteQuestionDown.FormId);

            foreach (var option in deleteOptionsDown.Where(option => option.QuestionOrderNum == deleteQuestionDown.QuestionOrderNum))
            {
                deleteOption = await opservice.Get(option.OptionId);
                await opservice.Delete(deleteOption);
                await oqaservice.Delete(option);
            }

            questionsList = await qfaservice.Get(currentForm.FormId);
            optionsList = await oqaservice.Get(currentForm.FormId);

            foreach (var question in questionsList.Where(question => question.QuestionOrderNum == deleteQuestionCount))
            {
                await qfaservice.Delete(question);
            }

            if (deleteQuestionCount == 2)
            {
                questionCount--;
                firstDeleted = true;
            }
            else if (deleteQuestionCount == 1)
            {
                firstDeleted = true;
            }
            else
            {
                questionCount--;
            }

            showDelete = false;
            StateHasChanged();
        }

        private async void AddFirst()
        {
            try{
                if (questionCount == 0 && firstDeleted == false)
                {
                    //Nýju formi bætt við
                    currentForm.FormName = Notification.NewFormName;
                    currentForm.DestinationEmail = Notification.DestinationEmail;
                    currentForm = await fiservice.Add(currentForm);

                    //Búið til eintak af CategoriesAssignments og Category og Form tengt saman.
                    CategoriesAssignments _CategoriesAssignments = new CategoriesAssignments();
                    _CategoriesAssignments.CategoryId = Int32.Parse(Notification.CategoryId);
                    _CategoriesAssignments.FormId = currentForm.FormId;
                    await qasservice.Add(_CategoriesAssignments);
                }

                //Það QuestionType sem var valið sótt og bætt við í currentQuestion. Henni síðan bætt við sem spurningu
                Questions currentQuestion = new Questions();
                QuestionTypes _QuestionTypes = new QuestionTypes();
                _QuestionTypes = await qtservice.Get(Int32.Parse(Notification.QuestionTypeId));
                currentQuestion.QuestionName = Notification.QuestionName;
                currentQuestion.QuestionTypes = _QuestionTypes;
                currentQuestion = await qservice.Add(currentQuestion);

                //Búið til eintak af QuestionsFormAssignments. CurrentQuestion tengd við form og sagt til um númer hvað spurningin er
                QuestionsFormAssignments qfa = new QuestionsFormAssignments();
                qfa.FormId = currentForm.FormId;
                qfa.QuestionId = currentQuestion.QuestionId;
                qfa.QuestionOrderNum = questionCount;
                await qfaservice.Add(qfa);

                //Ef spurningin er með RadioButton eða Checkbox
                if (currentQuestion.QuestionTypes.QuestionTypeId == 2 || currentQuestion.QuestionTypes.QuestionTypeId == 5)
                {
                    //Fyrsta option bætt við í option töfluna og síðan búið til eintak af OptionsQuestionAssignments og option-inn tengdur við spurningu
                    currentOption1 = await opservice.Add(currentOption1);

                    OptionsQuestionAssignmnents OQA = new OptionsQuestionAssignmnents();
                    OQA.OptionId = currentOption1.OptionId;
                    OQA.FormId = currentForm.FormId;
                    OQA.OptionOrderNum = 1;
                    OQA.QuestionOrderNum = questionCount;
                    OQA = await oqaservice.Add(OQA);

                    //Sama og fyrir ofan, nema fyrir option númer 2
                    currentOption2 = await opservice.Add(currentOption2);

                    OptionsQuestionAssignmnents SecondOQA = new OptionsQuestionAssignmnents();
                    SecondOQA.OptionId = currentOption2.OptionId;
                    SecondOQA.FormId = currentForm.FormId;
                    SecondOQA.OptionOrderNum = 2;
                    SecondOQA.QuestionOrderNum = questionCount;
                    SecondOQA = await oqaservice.Add(SecondOQA);

                    if (!(currentOption3.OptionName == null))
                    {
                        //Sama og fyrir ofan, nema fyrir option 3
                        currentOption3 = await opservice.Add(currentOption3);

                        OptionsQuestionAssignmnents ThirdOQA = new OptionsQuestionAssignmnents();
                        ThirdOQA.OptionId = currentOption3.OptionId;
                        ThirdOQA.FormId = currentForm.FormId;
                        ThirdOQA.OptionOrderNum = 3;
                        ThirdOQA.QuestionOrderNum = questionCount;
                        ThirdOQA = await oqaservice.Add(ThirdOQA);
                    }

                    if (!(currentOption4.OptionName == null))
                    {
                        //Sama og fyrir ofan, nema fyrir option 4
                        currentOption4 = await opservice.Add(currentOption4);

                        OptionsQuestionAssignmnents FourthOQA = new OptionsQuestionAssignmnents();
                        FourthOQA.OptionId = currentOption4.OptionId;
                        FourthOQA.FormId = currentForm.FormId;
                        FourthOQA.OptionOrderNum = 4;
                        FourthOQA.QuestionOrderNum = questionCount;
                        FourthOQA = await oqaservice.Add(FourthOQA);
                    }
                }
                //Ef þetta er spurning með textainput
                else { }

                ClearAll();
            }
            catch(Exception)
            {
                // Catch Exception that occur when user push twice on save button - it doesn't have any affect.
                //hér gætum við sett inn log  í logfile??
            }
            questionCount++;
        }

        private async void ClearAll()
        {
            //Birta þær spurningar sem hafa verið sendar inn
            questionsList = await qfaservice.Get(currentForm.FormId);
            optionsList = await oqaservice.Get(currentForm.FormId);

            NotificationInputModel replaceNotification = new NotificationInputModel();
            replaceNotification.NewFormName = Notification.NewFormName;
            replaceNotification.CategoryId = Notification.CategoryId;
            replaceNotification.DestinationEmail = Notification.DestinationEmail;
            Notification = replaceNotification;

            Options replaceOption1 = new Options();
            currentOption1 = replaceOption1;

            Options replaceOption2 = new Options();
            currentOption2 = replaceOption2;

            Options replaceOption3 = new Options();
            currentOption3 = replaceOption3;

            Options replaceOption4 = new Options();
            currentOption4 = replaceOption4;

            optionCount = 2;

            StateHasChanged();
        }

        public DateTime SelectedDate { get; set; }

        public void OnDateSelected(DateTime dt)
        {
            SelectedDate = dt;
        }
    }
</div>