@using Microsoft.AspNetCore.Components
@using BlazorSkraApp1.Data
@using BlazorSkraApp1.Models.InputModels
@using BlazorSkraApp1.Models.ViewModels
@using BlazorSkraApp1.Services
@inject IJSRuntime jsRuntime
@inject ICategoriesService categoriesService
@inject IQuestionTypesService questionTypesService
@inject IOptionsQuestionAssignmnentsService optionsQuestionAssignmentsService
@inject IQuestionsFormAssignmentService questionsFormAssignmentsService
@inject IQuestionsService questionsService
@inject IOptionsService optionsService
@inject IFormsService formsService

@if (editContext == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Augnablik...</span>
        </div>
    </div>
}
else
{
    <div class="container">
    <EditForm EditContext="editContext" OnSubmit="CreateForm">
        <ObjectGraphDataAnnotationsValidator />
        <!-- FormInfo input fields -->
        <div class="card">
            <div class="card-body info-card">
                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Nafn eyðublaðs</label>
                    <div class="col-sm-10">
                        <InputText id="name" class="form-control" placeholder="Skrifaðu hér..." @bind-Value="@formInputModel.FormName" />
                        <ValidationMessage For="@(() => formInputModel.FormName)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="categories" class="col-sm-2 col-form-label">Flokkur</label>
                    <div class="col-sm-10">
                        <InputSelect id="categories" class="form-control" @bind-Value="@formInputModel.CategoryId">
                            <option value="">Veldu flokk</option>
                            @if (categoriesList == null)
                                {
                                <option>Augnablik...</option>
                                }
                                else
                                {
                                    foreach (var category in categoriesList)
                                    {
                                    <option value="@System.Convert.ToString(category.CategoryId)">@category.CategoryName</option>
                                    }
                                }
                            /**/
                            /**/
                            /**/
                        </InputSelect>
                        <ValidationMessage For="@(() => formInputModel.CategoryId)" />
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">
                        Viðtökunetfang
                        <a href="/Instructions" target="_blank" class="email-info">
                            <i class="fas fa-info-circle" title="Leiðbeiningar fyrir sendingar með Trello og Jira"></i>
                        </a>
                    </label>
                    <div class="col-sm-10">
                        <InputText id="email" class="form-control" placeholder="Skrifaðu hér..." @bind-Value="@formInputModel.DestinationEmail" />
                        <ValidationMessage For="@(() => formInputModel.DestinationEmail)" />
                    </div>
                </div>
                <label id="anon-label">Leyfa svaranda að svara nafnlaust</label>
                @if (formInputModel.IsAnonymous)
                {
                    <input id="anon-check" type="checkbox" checked @onchange="@((eventArgs) => SaveAnonymousValue((bool)eventArgs.Value))" />
                }
                else
                {
                    <input id="anon-check" type="checkbox" @onchange="@((eventArgs) => SaveAnonymousValue((bool)eventArgs.Value))" />
                }
            </div>
        </div>
        <!-- Questions input fields -->
        @foreach (var question in formInputModel.Questions)
        {
            <div class="vl"></div>
            <div class="card question-create-card">
                <div class="card-header">
                    @if (formInputModel.Questions.Count() > 1)
                    {
                        <button @onclick="(() => RemoveQuestion(question))" type="button" id="remove-question" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    }
                </div>
                <div class="card-body">
                    <div class="form-row">
                        <div class="form-group col">
                            <label>Titill spurningar</label>
                            <InputText placeholder="Skrifaðu hér.." type="text" id="question-name" class="form-control" @bind-Value="@question.QuestionName" />
                            <ValidationMessage For="@(() => question.QuestionName)" />
                        </div>
                        <div class="form-group col">
                            <label for="question-type">Spurningategund</label>
                            <InputSelect @bind-Value="@question.QuestionTypeId" id="question-type" class="form-control">
                                <option value="">Veldu tegund</option>
                                @if (questionTypesList == null)
                                {
                                    <option>Augnablik...</option>
                                }
                                else
                                {
                                    foreach (var type in questionTypesList)
                                    {
                                        <option value="@System.Convert.ToString(type.QuestionTypeId)">@type.QuestionTypeName</option>
                                    }
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => question.QuestionTypeId)" />
                        </div>
                    </div>
                    
                    <!-- Options input fields -->
                    @if (question.QuestionTypeId == "4" || question.QuestionTypeId == "5")
                    {
                        @foreach (var option in question.Options)
                        {
                            <div class="form-group row create-option">
                                <label class="col-sm-2 col-form-label">Valkostur</label>
                                <input id="radio-create" type="radio" disabled>
                                <div class="col-sm-4">
                                    <InputText id="option-name" class="form-control" placeholder="Skrifaðu hér.." @bind-Value="@option.OptionName" />
                                    <ValidationMessage For="@(() => option.OptionName)" />
                                </div>
                                @if (question.Options.Count() > 2)
                                {
                                    <button @onclick="(() => RemoveOption(question, option))" type="button" class="close">
                                        <span aria-hidden="true" title="Eyða">&times;</span>
                                    </button>
                                }
                            </div>
                        }
                        <div class="form-group row create-option">
                            <button @onclick="(() => AddOption(question))" data-toggle="modal" type="button" class="btn approve-btn add-option">
                                <i class="far fa-plus-square"></i>Bæta við valkost
                            </button>
                        </div>
                    }
                </div>
            </div>
        }
        <div class="vl"></div>
        <div class="creation-buttons">
            <div class="left-div"></div>
            <div class="add-question">
                <button @onclick="(() => AddQuestion())" type="button" class="btn approve-btn">
                    <i class="far fa-plus-square"></i>Bæta við spurningu
                </button>
            </div>
            <div class="submit-creation">
                <button type="submit" class="btn btn-light new-form">@CustomButtonText</button>
            </div>
        </div>
    </EditForm>
    </div>
}

@code {
    [Parameter]
    public int? formIdParameter { get; set; }
    [Parameter]
    public FormsViewModel formParameter { get; set; }
    [Parameter]
    public string selectedCategoryId { get; set; }
    [Parameter]
    public EventCallback<FormsInputModel> OnEdit { get; set; }
    [Parameter]
    public RenderFragment CustomButtonText { get; set; }
    private FormsInputModel formInputModel;
    private EditContext editContext;
    List<Categories> categoriesList;
    List<QuestionTypes> questionTypesList;


    protected override async Task OnInitializedAsync()
    {
        formInputModel = new FormsInputModel();
        formInputModel.Questions = new List<QuestionsInputModel>();
        categoriesList = await categoriesService.Get();
        questionTypesList = await questionTypesService.Get();

        if (selectedCategoryId != null)
        {
            formInputModel.CategoryId = selectedCategoryId;
        }

        if (formIdParameter != null)
        {
            int formId = formIdParameter ?? default(int);
            FormsViewModel form = await formsService.Get(formId);
            PopulateInputModel(form);
        }
        else if(formParameter != null)
        {
            PopulateInputModel(formParameter);
        }
        else
        {
            var question = new QuestionsInputModel();
            question.Options = new List<OptionsInputModel>();
            question.Options.Add(new OptionsInputModel());
            question.Options.Add(new OptionsInputModel());
            formInputModel.Questions.Add(question);
        }

        editContext = new EditContext(formInputModel);
    }

    private void SaveAnonymousValue(bool check)
    {
        if(check)
        {
            formInputModel.IsAnonymous = true;
        }
        else {
            formInputModel.IsAnonymous = false;
        }
    }

    private void AddQuestion()
    {
        var question = new QuestionsInputModel();
        question.Options = new List<OptionsInputModel>();
        question.Options.Add(new OptionsInputModel());
        question.Options.Add(new OptionsInputModel());
        formInputModel.Questions.Add(question);
        StateHasChanged();
    }

    private void RemoveQuestion(QuestionsInputModel question)
    {
        formInputModel.Questions.Remove(question);
        editContext = new EditContext(formInputModel);
        StateHasChanged();
    }

    private void AddOption(QuestionsInputModel question)
    {
        var newOption = new OptionsInputModel();
        question.Options.Add(newOption);
        StateHasChanged();
    }

    private void RemoveOption(QuestionsInputModel question, OptionsInputModel option)
    {

        question.Options.Remove(option);
        //var equal = editContext.Model.Equals(questionInputModel);
        editContext = new EditContext(formInputModel);
        StateHasChanged();
    }

    protected async void CreateForm()
    {
        //Remove unnecessary options
        foreach (var question in formInputModel.Questions)
        {
            if (question.QuestionTypeId != "4" && question.QuestionTypeId != "5")
            {
                question.Options = new List<OptionsInputModel>();
            }
        }

        if (editContext.Validate())
        {
            //Send formInputModel to Parent component
            await OnEdit.InvokeAsync(formInputModel);
        }
        else
        {
            //Add formerly removed options
            foreach (var question in formInputModel.Questions)
            {
                if (question.QuestionTypeId != "4" && question.QuestionTypeId != "5")
                {
                    question.Options.Add(new OptionsInputModel());
                    question.Options.Add(new OptionsInputModel());
                }
            }
        }
    }

    private void PopulateInputModel(FormsViewModel form)
    {
        //Populate input model with form data
        formInputModel.FormName = form.FormName;
        formInputModel.DestinationEmail = form.DestinationEmail;
        formInputModel.CategoryId = form.CategoryId.ToString();
        formInputModel.IsAnonymous = form.IsAnonymous;

        foreach (var formQuestion in form.Questions)
        {
            QuestionsInputModel question = new QuestionsInputModel();
            question.QuestionName = formQuestion.QuestionName;
            question.QuestionTypeId = formQuestion.QuestionTypeId.ToString();
            question.Options = new List<OptionsInputModel>();
            foreach (var formOption in formQuestion.Options)
            {
                OptionsInputModel option = new OptionsInputModel();
                option.OptionName = formOption.OptionName;
                question.Options.Add(option);
            }
            formInputModel.Questions.Add(question);
        }
    }
}
