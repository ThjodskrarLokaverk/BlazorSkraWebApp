@using Microsoft.AspNetCore.Components
@using BlazorSkraApp1.Data
@using BlazorSkraApp1.Services
@using Serilog
@inject ICategoriesService service
@inject IFormsCategoryAssignmentsService formsCategoryService
@inject IFormsInfoService fiservice
@inject IJSRuntime jsRuntime

<AuthorizeView Roles="Admin" Context="authContext">
    <!-- Edit Category popup modal -->
    <div class="modal fade" id="editCategoryModal" tabindex="-1" role="dialog" aria-labelledby="modalTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="form">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalTitle">Breyta flokk</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <EditForm Model="@categoryModel" OnValidSubmit="@EditCategory">
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="categoryName">Nafn flokks</label>
                            <InputText id="name" class="form-control" @bind-Value="@categoryModel.CategoryName" />
                            <ValidationMessage For="@(() => categoryModel.CategoryName)" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn approve-btn" aria-labelledby="Submit">Uppfæra</button>
                        <button type="button" class="btn delete-btn" data-dismiss="modal" aria-labelledby="Delete" data-toggle="modal" data-target="#confirmationModal">Eyða</button>
                        <button type="button" class="btn cancel-btn" data-dismiss="modal" aria-labelledby="Close">Hætta við</button>
                    </div>
                    <DataAnnotationsValidator />
                </EditForm>
            </div>
        </div>
    </div>

    <!-- Delete Category popup -->
    <ConfirmationModalComponent OnClick="DeleteCategoryHandler">
        <CustomHeader>Eyða flokk</CustomHeader>
        <CustomBody>Ertu viss um að þú viljir eyða flokknum @(selectedCategory.CategoryName) og öllum eyðublöðum sem tilheyra honum?</CustomBody>
        <CustomButtonText>Eyða</CustomButtonText>
        <CustomCloseButtonText>Hætta við</CustomCloseButtonText>
    </ConfirmationModalComponent>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [Parameter]
    public EventCallback<Categories> OnEdit { get; set; }
    [Parameter]
    public EventCallback<Categories> OnDelete { get; set; }
    [Parameter]
    public Categories selectedCategory { get; set; }
    Categories categoryModel;
    String currentUser;

    protected override async Task OnInitializedAsync()
    {
        currentUser = (await authenticationStateTask).User.Identity.Name;
    }

    //This function runs when the parent component sets or resets the parameters
    protected override void OnParametersSet()
    {
        categoryModel = new Categories();
        categoryModel.CategoryName = selectedCategory.CategoryName;
    }

    protected async void EditCategory()
    {
        try
        {
            //Save made changes to the selectedCategory
            var oldName = selectedCategory.CategoryName;
            selectedCategory.CategoryName = categoryModel.CategoryName;

            //Update the category in the database
            await service.Update(selectedCategory);

            //Update data in parent component
            await OnEdit.InvokeAsync(selectedCategory);

            await CloseModal("editCategoryModal");
            Log.Information($"Flokknum {oldName} var breytt í {selectedCategory.CategoryName} af {currentUser} ");

        }
        catch (System.InvalidOperationException)
        {
            // catch exception that occurs when user click twice on the modifier pen when updating category. 
            //Doesn't have affect on the application
        }
        catch (Exception)
        {
            // unhandled Exception 
            // ættum við kannski að gera pop up glugga sem segir að mögulega hafi eitthvað farið úrskeiðis, vinsamlegast athugaðu það og reyndu aftur ef þörf er á?
        }
    }

    protected async void DeleteCategoryHandler()
    {
        try
        {
            //List that holds id's of all forms that are about to be deleted
            var formsCategoryAssignmentsList = await formsCategoryService.Get(selectedCategory.CategoryId);

            //Delete the forms
            foreach(var form in formsCategoryAssignmentsList)
            {
                await fiservice.Delete(form.FormId);
            }

            await service.Delete(selectedCategory.CategoryId);

            //Update data in parent component
            await OnDelete.InvokeAsync(selectedCategory);
            Log.Information($"Flokknum '{selectedCategory.CategoryName}' var eytt af {currentUser} ");
        }
        catch (Exception)
        {
            // Catches Exception that occurs when user click twice on "eyða". Doesn't have any affect on the application.Exception
        }
    }

    //Closes the modal with the id modalID
    private async Task CloseModal(string modalId)
    {
        await jsRuntime.InvokeAsync<object>("CloseModal", modalId);
    }
}
